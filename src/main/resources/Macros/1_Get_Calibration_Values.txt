// Function written by Nicolas Stifani nstifani@gmail.com for more info

// Header
requires("1.50f");
PluginName="KinemaJ";
MacroName="Get Calibration Values";


// Set the Default Parameters
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack displays redirect=None decimal=9");
run("Input/Output...", "jpeg=100 gif=-1 file=.csv use skip copy_column copy_row save_column save_row");
run("Misc...", "divide=Infinity hide");

// Make the ImageJ preferences for threshold visualisation as Red over background
call("ij.Prefs.set", "threshold.mode", 0);
// Set IJ Size and position
IJPosX=screenWidth*0.1; // The position of ImageJ in X
IJPosY=screenHeight*0;
IJSizeX=575; // The width of ImageJ in pixel
IJSizeY=100;
Spacer=20; // A spacer
DummyVariable=eval("script","IJ.getInstance().setLocation("+IJPosX+","+IJPosY+");"); // Adjust the position of the ImageJ bar

// Set MultiCh Toolbar Size and position
ToolbarSizeX=240; // Size of the toolbar
ToolbarSizeY=170;
ToolbarPosX=IJPosX+IJSizeX+Spacer;
ToolbarPosY=IJPosY;

ListWindows=getList("window.titles");
for(n=0; n<ListWindows.length; n++){
  WindowN=ListWindows[n];
  if(WindowN==PluginName+" Toolbar"){
    // If tool bar is present place it next to the IJ bar
    selectWindow(PluginName+" Toolbar");
    setLocation(ToolbarPosX,ToolbarPosY);
  }
}

//Set Threshold Window Size and Position
ThresholdSizeX=290;
ThresholdSizeY=260;
ThresholdPosX=ToolbarPosX; // The Position in X of the threshold window
ThresholdPosY=ToolbarPosY+ToolbarSizeY+Spacer;
call("ij.Prefs.set", "threshold.loc", ThresholdPosX+" , "+ThresholdPosY);

// Set ROI Manager Size and Position
ROIManagerSizeX=290;
ROIManagerSizeY=260;
ROIManagerPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
ROIManagerPosY=ThresholdPosY;
call("ij.Prefs.set", "manager.loc", ROIManagerPosX+" , "+ROIManagerPosY);

// Set Results Size and Position
ResultsSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer));
ResultsSizeY=ToolbarSizeY;
ResultsPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
ResultsPosY=ToolbarPosY;
call("ij.Prefs.set", "results.loc", ResultsPosX+" , "+ResultsPosY);
call("ij.Prefs.set", "results.width", ResultsSizeX);
call("ij.Prefs.set", "results.height", ResultsSizeY);


//////////////////////////// Get or Set default values saved in the Prefs
RealWidthCm=call("ij.Prefs.get", PluginName+"."+MacroName+".RealWidthCm", 7);
RealHeightCm=call("ij.Prefs.get", PluginName+"."+MacroName+".RealHeightCm", 4);

DialogPass=0;

while(DialogPass!=1){
  //////////////////////////// Initial Dialog Box
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0,0,0);
  Dialog.addMessage("The Function "+MacroName+" will:"
  +"\n - Prompt to select a Folder containing at least "+MinNbFile+" "+FileExt+" Calibration Files"
  +"\n - Open all "+FileExt+" Files 1 by 1 within the selected Folder"
  +"\n - Try to detect Calibration markers automatically"
  +"\n - If automatic detection fails: Prompt to draw a rectangular selection on the Calibration Markers"
  +"\n - Save the first frame as a TIF File"
  +"\n - Save the Calibration Values in a CSV File");
  Dialog.setInsets(10,50,0);
  Dialog.addNumber("Real Calibration Width", RealWidthCm, 1, 5, "cm");
  Dialog.setInsets(0,50,0);
  Dialog.addNumber("Real Calibration Height", RealHeightCm, 1, 5, "cm");
  Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
  Dialog.show();
  RealWidthCm=Dialog.getNumber();
  RealHeightCm=Dialog.getNumber();
  //////////////////////////// End of Initial Dialog Box
  if(isNaN(RealWidthCm)==1 || isNaN(RealHeightCm)==1 || RealWidthCm<0 || RealHeightCm<0){
    Dialog.create(PluginName+" Information");
    Dialog.setInsets(0, 0, 0);
    Dialog.addMessage("Sorry but Real Calibration Width and Height must be positive numbers.");
    TryAgainCancelCloseArray=newArray("Try again", "Cancel and Close");
    Dialog.setInsets(5, 150, 0);
    Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2,1, "Try again");
    Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
    // Display the Dialog and get user choice
    Dialog.show();
    UserChoice = Dialog.getRadioButton();
    if (UserChoice=="Cancel and Close"){
      exit(PluginName+" "+MacroName+" stopped because Real Calibration Width and Height were not positive numbers.");
    } else {
      RealWidthCm=call("ij.Prefs.get", PluginName+"."+MacroName+".RealWidthCm", 7);
      RealHeightCm=call("ij.Prefs.get", PluginName+"."+MacroName+".RealHeightCm", 4);
    }
  } else {
    DialogPass=1;
    call("ij.Prefs.set", PluginName+"."+MacroName+".RealWidthCm",RealWidthCm);
    call("ij.Prefs.set", PluginName+"."+MacroName+".RealHeightCm",RealHeightCm);
  }
}


function SelectInputDir(MinNbFile, FileExt){
  // NbFile This is the number of File within the InputList
  // FileExt This is the File extension as a string example ".tif"
  // MinNbFile This is the minimum Nb of File to be present in the list to be accepted
  // InputList is ALL the Files within the input Directory
  // InputFileList is the list of Files with the correct File extension

  /////////////////////// Select Input Directory
  InputDirPath=getDirectory("Select the FOLDER containing at least "+MinNbFile+" "+FileExt+" File to process.");
  InputList=getFileList(InputDirPath);
  ParentDir=File.getParent(InputDirPath)+File.separator;
  InputDirName=File.getName(InputDirPath);
  /////////////////////// Select Input Directory

  NbFile=0;
  // Evaluate the Nb of File
  for (ItemI=0; ItemI<InputList.length; ItemI++){
    if(endsWith(toLowerCase(InputList[ItemI]), "."+toLowerCase(FileExt))){
      Basename=split(InputList[ItemI],".");
      if(Basename.length!=2){
        exit(PluginName+" Information\nThe Function "+MacroName+" stopped because the File \""+InputList[ItemI]+"\" contains more than one \".\"\nMake sure filnames have no \".\" at the exception of File extension.");
      }

      NbFile++;
    } // If ends by Extension increment nbTFile
  }
  InputDirPass=0; // This is the Value switch if the InputDir is passing the criteria
  if (NbFile<MinNbFile){
    Dialog.create(PluginName+" Information");
    Dialog.setInsets(0, 0, 0);
    Dialog.addMessage("Sorry but the Folder: \"" +InputDirName+"\" does not contain at least "+MinNbFile+" "+FileExt+" File.");
    Dialog.setInsets(0, 0, 0);
    Dialog.addMessage(MacroName+" requires a Folder that contains at least "+MinNbFile+" "+FileExt+" File.");
    Dialog.setInsets(0, 0, 0);
    TryAgainCancelCloseArray=newArray("Try Again", "Cancel & Close");
    Dialog.setInsets(0, 100, 0);
    Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2, 1, "Try Again");
    Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
    Dialog.show();
    UserChoice=Dialog.getRadioButton();
    if (UserChoice=="Cancel & Close"){
      exit(PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Folder: \"" +InputDirName+"\" did not contain at least "+MinNbFile+" "+FileExt+" File.");
    } /////////////////////// End user choice
  } else { // else of if NbFile is at least equal to the min Nb of File
    InputDirPass=1;
    InputFileList=newArray(NbFile);
    n=0;
    for(i=0; i<InputList.length;i++){
      if (endsWith(toLowerCase(InputList[i]),"."+toLowerCase(FileExt))==1){
        InputFileList[n]=InputList[i];
        n++;
      }// end of IF endswith
    }// end for each File
  } // end of else
} // End of Function Select InputDir

function CreateOutputDir(FolderSuffix){
  OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+File.separator;
  n=1;
  while(File.exists(OutputDirPath)!=0){
    n++;
    OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+"_"+n+File.separator;
  }
  File.makeDirectory(OutputDirPath);
  OutputDirName=File.getName(OutputDirPath);
}

function CreateOutputSubDir(SubDirArray) {
  for(i=0;i<SubDirArray.length;i++){
    SubDirPath=OutputDirPath+SubDirArray[i]+File.separator;
    File.makeDirectory(SubDirPath);
  } // End of for
} // End of CreateOutputSubDir function




// Defines Global Variables
var MinNbFile=1;
var FileExt="AVI";
var InputDirPath;
var ParentDir;
var InputDirName;
var NbFile;
var InputFileList; // This is the List of File with the correct extension
var InputDirPass;

// Select InputDir with at least 1 TIF File
do{
  SelectInputDir(MinNbFile,FileExt);
}while(InputDirPass!=1)

// Create OutputDirectory with the Folder suffix
var FolderSuffix="Calibrated";
var OutputDirPath;
var OutputDirName;
CreateOutputDir(FolderSuffix);

// Create Output Subdirectory and create general variables for each SubdirectoryOuputdir Path
var SubDirArray=newArray("Calibrated Images");
CreateOutputSubDir(SubDirArray);
//////////////////////////// End of Create an unique output directory
OutputImagePath=""+OutputDirPath+"Calibrated Images"+File.separator;


//////////////////////////// Create an output CSV File
CSVFileName="Video Calibration Values";
CSVFilePath=OutputDirPath+CSVFileName+".CSV";
CSVFile = File.open(CSVFilePath);
CellSeparator= ",";
LineSeparator="\n";
// Write the header of the CSV
print(CSVFile, "Filename"+CellSeparator+"Width (pixel)"+CellSeparator+"Height (pixel)"+CellSeparator+"Width (cm)"+CellSeparator+"Height (cm)"+LineSeparator);
//////////////////////////// End of Create an output CSV File

//////////////////////////// Process each File
for (Filei = 0; Filei < InputFileList.length; Filei++){
  setBatchMode(true);
  InputFileNamei = InputFileList[Filei];
  InputFilePathi = InputDirPath+InputFileNamei;
  Basename=split(InputFileNamei, ".");
  InputFileNameiNoExt=Basename[0];

  // Open avi File
  run("AVI...", "select=&InputFilePathi last=1 use convert");

  /////////////// Try to detect the 4 markers
  run("Duplicate...", "title=AutoDetect");
  selectWindow("AutoDetect");
  run("Auto Threshold...", "method=Shanbhag white"); // Threshold
  run("Convert to Mask");
  run("Open"); // Remove noise
  // Detect circular markers
  selectWindow("AutoDetect");
  run("Analyze Particles...", "size=80-500 circularity=0.90-1.00 display clear");
  selectWindow("AutoDetect");
  close();

  if (nResults==4){ // If 4 markers are found get the results
    XM=newArray(nResults);
    YM=newArray(nResults);
    for (n=0;n<nResults;n++){ // Populate the arrays
      XM[n]=getResult("XM",n);
      YM[n]=getResult("YM",n);
    }
    // Get the Statistics of the arrays
    Array.getStatistics(XM, MinXM, MaxXM, MeanXM, StdDevXM);
    Array.getStatistics(YM, MinYM, MaxYM, MeanYM, StdDevYM);

    // Get the coordinates of the coordinates of the Calibration Markers
    PosX=round(MinXM);
    PosY=round(MinYM);
    Width=round(MaxXM-MinXM);
    Height=round(MaxYM-MinYM);

  } else if (nResults!=4){ /////// if 4 markers haven't been detected ask user to do it manually
  // Close results windows if it is open
  if(isOpen("Results")){
    run("Clear Results");
    selectWindow("Results");
    run("Close");
  }//end of if Results is open

  setBatchMode("show");
  selectWindow(InputFileNamei);
  setLocation(IJPosX,IJPosY+IJSizeY+Spacer,IJSizeX, screenHeight*0.5);

  // Prompt user to manually draw a rectangle
  setTool(0); // Preselect rectangular tool
  waitForUser(PluginName+" Information", ""
  +"Sorry the automatic calibration marker detection could not identify 4 markers."
  +"\nPlease, draw a rectangle on the calibration Markers."
  +"\nWhen done, press OK.");
  CurrentSelection=selectionType();

  while(CurrentSelection!=0){
    // Create a Dialog
    Dialog.create(PluginName+" Information");
    Dialog.setInsets(0, 0, 0);
    Dialog.addMessage("Sorry but no rectangular selection has been detected."
    +"\nUse the rectangle selection tool to draw a rectangle on the calibration markers.");
    TryAgainCancelCloseArray=newArray("Try again", "Cancel and Close");
    Dialog.setInsets(5, 150, 0);
    Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2,1, "Try again");
    Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
    // Display the Dialog and get user choice
    Dialog.show();
    UserChoice = Dialog.getRadioButton();
    if (UserChoice=="Cancel and Close"){
      exit(PluginName+" Information\nThe Function "+MacroName+" stopped because no rectangular selection was provided.");
    } else {
      setTool(0); // Preselect rectangular tool
      waitForUser(PluginName+" Information", ""
      +"Please, draw a rectangle on the calibration Markers."
      +"\nWhen done, press OK.");
      CurrentSelection=selectionType();
    }
  }

  // Once a rectangular selection is done
  setBatchMode("hide");
  run("Clear Results");
  run("Measure");

  // Get the Values of the rectangular selection
  PosX=getResult("BX");
  PosY=getResult("BY");
  Width=getResult("Width");
  Height=getResult("Height");
  run("Clear Results");
}////////////// end of if 4 markers could not be automatically detected

///////////// Append the coordinates to the CSV File
print(CSVFile, InputFileNameiNoExt+CellSeparator+Width+CellSeparator+Height+CellSeparator+RealWidthCm+CellSeparator+RealHeightCm+LineSeparator);

////////////// Add the selection as an overlay
selectWindow(InputFileNamei);
makeRectangle(PosX, PosY, Width, Height);
run("Remove Overlay");
run("Overlay Options...", "stroke=cyan width=5 fill=none apply show");
run("Labels...", "color=magenta font=18 show bold");
run("Add Selection...");

// Save the File as TIF
selectWindow(InputFileNamei);
saveAs("Tif", OutputImagePath+InputFileNameiNoExt+"_Calibrated");
close();

// Update the progress bar
showProgress(Filei, InputFileList.length);
}/////////////////////End of for Filei loop

// Close Threshold windows if it is open
if(isOpen("Threshold")){
  selectWindow("Threshold");
  run("Close");
}//end of if threshold is open

// Close results windows if it is open
if(isOpen("Results")){
  run("Clear Results");
  selectWindow("Results");
  run("Close");
}//end of if Results is open

// Close the CSV File
File.close(CSVFile);
beep();

///////////////////// Closing Dialog Box
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage(NbFile+" "+ FileExt+ " File in the Folder: \"" +InputDirName+"\" have been processed successfully.");
Dialog.setInsets(10, 0, 0);
Dialog.addMessage("Calibrated Images are saved in the Folder: \""+OutputDirName+"\".");
Dialog.setInsets(10, 0, 0);
Dialog.addMessage("Calibration Table is saved in: \""+CSVFileName+".CSV\"");
Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
Dialog.show();

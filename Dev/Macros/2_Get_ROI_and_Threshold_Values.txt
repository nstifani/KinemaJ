// Function written by Nicolas Stifani nstifani@gmail.com for more info

// Header
requires("1.50f");
PluginName="KinemaJ";
MacroName="Get ROI and Threshold Values";


// Set the Default Parameters
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack displays redirect=None decimal=9");
run("Input/Output...", "jpeg=100 gif=-1 file=.csv use skip copy_column copy_row save_column save_row");
run("Misc...", "divide=Infinity hide");

// Make the ImageJ preferences for threshold visualisation as Red over background
call("ij.Prefs.set", "threshold.mode", 0);
// Set IJ Size and position
IJPosX=screenWidth*0.1; // The position of ImageJ in X
IJPosY=screenHeight*0;
IJSizeX=575; // The width of ImageJ in pixel
IJSizeY=100;
Spacer=20; // A spacer
DummyVariable=eval("script","IJ.getInstance().setLocation("+IJPosX+","+IJPosY+");"); // Adjust the position of the ImageJ bar

// Set MultiCh Toolbar Size and position
ToolbarSizeX=240; // Size of the toolbar
ToolbarSizeY=170;
ToolbarPosX=IJPosX+IJSizeX+Spacer;
ToolbarPosY=IJPosY;

ListWindows=getList("window.titles");
for(n=0; n<ListWindows.length; n++){
  WindowN=ListWindows[n];
  if(WindowN==PluginName+" Toolbar"){
    // If tool bar is present place it next to the IJ bar
    selectWindow(PluginName+" Toolbar");
    setLocation(ToolbarPosX,ToolbarPosY);
  }
}

//Set Threshold Window Size and Position
ThresholdSizeX=290;
ThresholdSizeY=260;
ThresholdPosX=ToolbarPosX; // The Position in X of the threshold window
ThresholdPosY=ToolbarPosY+ToolbarSizeY+Spacer;
call("ij.Prefs.set", "threshold.loc", ThresholdPosX+" , "+ThresholdPosY);

// Set ROI Manager Size and Position
ROIManagerSizeX=290;
ROIManagerSizeY=260;
ROIManagerPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
ROIManagerPosY=ThresholdPosY;
call("ij.Prefs.set", "manager.loc", ROIManagerPosX+" , "+ROIManagerPosY);

// Set Results Size and Position
ResultsSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer));
ResultsSizeY=ToolbarSizeY;
ResultsPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
ResultsPosY=ToolbarPosY;
call("ij.Prefs.set", "results.loc", ResultsPosX+" , "+ResultsPosY);
call("ij.Prefs.set", "results.width", ResultsSizeX);
call("ij.Prefs.set", "results.height", ResultsSizeY);


//////////////////////////// Initial Dialog Box
Dialog.create(PluginName+" Information");
Dialog.setInsets(0,0,0);
Dialog.addMessage("The Function "+MacroName+" will :"
+"\n - Prompt to select a Folder containing ar least "+MinNbFile+" "+FileExt+" Files"
+"\n - Open all "+FileExt+" Files 1 by 1 within the selected Folder"
+"\n - Determine the Threshold and the ROI and prompt user for validation"
+"\n - Save the Threshold Values and the ROI coordinates in a CSV File");
Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
Dialog.show();
//////////////////////////// End of Initial Dialog Box



function SelectInputDir(MinNbFile, FileExt){
  // NbFile This is the number of File within the InputList
  // FileExt This is the File extension as a string example ".tif"
  // MinNbFile This is the minimum Nb of File to be present in the list to be accepted
  // InputList is ALL the Files within the input Directory
  // InputFileList is the list of Files with the correct File extension

  /////////////////////// Select Input Directory
  InputDirPath=getDirectory("Select the FOLDER containing at least "+MinNbFile+" "+FileExt+" File to process.");
  InputList=getFileList(InputDirPath);
  ParentDir=File.getParent(InputDirPath)+File.separator;
  InputDirName=File.getName(InputDirPath);
  /////////////////////// Select Input Directory

  NbFile=0;
  // Evaluate the Nb of File
  for (ItemI=0; ItemI<InputList.length; ItemI++){
    if(endsWith(toLowerCase(InputList[ItemI]), "."+toLowerCase(FileExt))){
      Basename=split(InputList[ItemI],".");
      if(Basename.length!=2){
        exit(PluginName+" Information\nThe Function "+MacroName+" stopped because the File \""+InputList[ItemI]+"\" contains more than one \".\"\nMake sure filnames have no \".\" at the exception of File extension.");
      }

      NbFile++;
    } // If ends by Extension increment nbTFile
  }
  InputDirPass=0; // This is the Value switch if the InputDir is passing the criteria
  if (NbFile<MinNbFile){
    Dialog.create(PluginName+" Information");
    Dialog.setInsets(0, 0, 0);
    Dialog.addMessage("Sorry but the Folder: \""+InputDirName+"\" does not contain at least "+MinNbFile+" "+FileExt+" File.");
    Dialog.setInsets(0, 0, 0);
    Dialog.addMessage(MacroName+" requires a Folder that contains at least "+MinNbFile+" "+FileExt+" File.");
    Dialog.setInsets(0, 0, 0);
    TryAgainCancelCloseArray=newArray("Try Again", "Cancel & Close");
    Dialog.setInsets(0, 100, 0);
    Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2, 1, "Try Again");
    Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
    Dialog.show();
    UserChoice=Dialog.getRadioButton();
    if (UserChoice=="Cancel & Close"){
      exit(PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Folder: \""+InputDirName+"\" did not contain at least "+MinNbFile+" "+FileExt+" File.");
    } /////////////////////// End user choice
  } else { // else of if NbFile is at least equal to the min Nb of File
    InputDirPass=1;
    InputFileList=newArray(NbFile);
    n=0;
    for(i=0; i<InputList.length;i++){
      if (endsWith(toLowerCase(InputList[i]),"."+toLowerCase(FileExt))==1){
        InputFileList[n]=InputList[i];
        n++;
      }// end of IF endswith
    }// end for each File
  } // end of else
} // End of Function Select InputDir

function CreateOutputDir(FolderSuffix){
  OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+File.separator;
  n=1;
  while(File.exists(OutputDirPath)!=0){
    n++;
    OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+"_"+n+File.separator;
  }
  File.makeDirectory(OutputDirPath);
  OutputDirName=File.getName(OutputDirPath);
}

function CreateOutputSubDir(SubDirArray) {
  for(i=0;i<SubDirArray.length;i++){
    SubDirPath=OutputDirPath+SubDirArray[i]+File.separator;
    File.makeDirectory(SubDirPath);
  } // End of for
} // End of CreateOutputSubDir function

// Defines Global Variables
var MinNbFile=1;
var FileExt="AVI";
var InputDirPass;
var InputDirPath;
var ParentDir;
var InputDirName;
var NbFile;
var InputFileList; // This is the List of File with the correct extension
do{
  SelectInputDir(MinNbFile,FileExt);
}while(InputDirPass!=1)

// Create OutputDirectory with the Folder suffix

var OutputDirPath;
var OutputDirName;
var FolderSuffix="ROI and Threshold Values";
CreateOutputDir(FolderSuffix);

// Create Output Subdirectory and create general variables for each SubdirectoryOuputdir Path
var SubDirArray=newArray("ROI Images");
CreateOutputSubDir(SubDirArray);
//////////////////////////// End of Create an unique output directory
OutputImagePath=""+OutputDirPath+"ROI Images"+File.separator;


//////////////////////////// Create an output CSV File
CSVFileName="ROI and Threshold Values";
CSVFilePath=OutputDirPath+CSVFileName+".CSV";
CSVFile = File.open(CSVFilePath);
CellSeparator= ",";
LineSeparator="\n";
// Write the header of the CSV
print(CSVFile, "Filename"+CellSeparator+"ROIPosX"+CellSeparator+"ROIPosY"+CellSeparator+"ROIWidth"+CellSeparator+"ROIHeight"+CellSeparator+"LowerValue"+CellSeparator+"UpperValue"+LineSeparator);
//////////////////////////// End of Create an output CSV File

//////////////////////////// Process each File
for (Filei = 0; Filei < InputFileList.length; Filei++){
  setBatchMode(true);
  InputFileNamei = InputFileList[Filei];
  InputFilePathi = InputDirPath+InputFileNamei;
  Basename=split(InputFileNamei, ".");
  InputFileNameiNoExt=Basename[0];

  // Open avi File
  run("AVI...", "select=&InputFilePathi use convert");

  //////////////////Get Threshold values
  setBatchMode("show");

  selectWindow(InputFileNamei);
  setLocation(IJPosX,IJPosY+IJSizeY+Spacer,IJSizeX, screenHeight*0.5);
  setAutoThreshold("Minimum dark");
  run("Threshold...");

  if(nSlices>1){
    selectWindow(InputFileNamei);
    run("Animation Options...", "speed=100");
    doCommand("Start Animation");
    wait(500);
    run("Stop Animation");
  }

  waitForUser("KinemaJ Information",""
  +"Adjust the Threshold to obtain RED Markers over the Background."
  +"\nWhen done, press OK.");

  setBatchMode("hide");
  // Get the Threshold Values
  getThreshold(LowerValue,UpperValue);


  if(nSlices>1){
    if(nSlices<1000){
      ReductionFactor=5;
    } else if(nSlices<2000){
      ReductionFactor=10;
    } else {
      ReductionFactor=floor(nSlices/200);
    }
    selectWindow(InputFileNamei);
    run("Reduce...", "reduction=&ReductionFactor");

    // Create the MaxIntensityProjection
    run("Z Project...", "projection=[Max Intensity]");
    // Close the initial Window
    selectWindow(InputFileNamei);
    close();
    // Duplicate the MaxIntensityProjection for saving in an output while the initial is used for calculation
    selectWindow("MAX_"+InputFileNamei);
    rename(InputFileNamei);
    run("Duplicate...", "title=MIP");
  } else if(nSlices==1){
    selectWindow(InputFileNamei);
    run("Duplicate...", "title=MIP");
  }
  selectWindow("MIP");
  setThreshold(LowerValue, UpperValue, "BlackBackground");
  run("Convert to Mask");
  run("Open");// Remove noise
  run("Clear Results");
  run("Measure");
  if (nResults>0){
    CenterX=getResult("XM");
    CenterY=getResult("YM");
    run("Clear Results");
  } else {
    CenterX=round(getWidth()/2);
    CenterY=round(getHeight()/2);
  }


  // Use analyze particles to guess the ROI
  selectWindow("MIP");
  run("Analyze Particles...", "size=50-Infinity show=Nothing display clear");

  selectWindow("MIP"); // Close the thresholded window
  close();

  if (nResults>0){
    WidthArray=newArray(nResults); // Create Arrays to put the Results Values
    HeightArray=newArray(nResults);
    AreaArray=newArray(nResults);

    for (n=0;n<nResults;n++){ // Add the results to the arrays
      AreaArray[n]=getResult("Area",n);
      WidthArray[n]=getResult("Width",n);
      HeightArray[n]=getResult("Height",n);
    }
    // Get the Statistics of each Array
    Array.getStatistics(AreaArray, MinArea, MaxArea, MeanArea, StdDevArea);
    Array.getStatistics(WidthArray, MinWidth, MaxWidth, MeanWidth, StdDevWidth);
    Array.getStatistics(HeightArray, MinHeight, MaxHeight, MeanHeight, StdDevHeight);
  } else { // defines default values if autodetection fails
    MaxWidth=round(getWidth()/4);
    MaxHeight=round(getHeight()/4);
  }
  ROIWidth=MaxWidth*1.75;
  ROIHeight=MaxHeight*2;
  ROIPosX=round(CenterX-ROIWidth/2);
  ROIPosY=round(CenterY-MaxHeight);


  //////////////// Draw the ROI and promt for user validation
  selectWindow(InputFileNamei);
  makeRectangle(ROIPosX, ROIPosY, ROIWidth, ROIHeight);
  setTool(0); // Set the rectangular selection
  selectWindow(InputFileNamei);
  setBatchMode("show");
  setLocation(IJPosX,IJPosY+IJSizeY+Spacer,IJSizeX, screenHeight*0.5);
  waitForUser("KinemaJ Information",""
  +"If necessary, adjust the rectangular selection aroung the Region of Interest."
  +"\nWhen done, press OK.");
  CurrentSelection=selectionType();

  while(CurrentSelection!=0){
    // Create a Dialog
    Dialog.create(PluginName+" Information");
    Dialog.setInsets(0, 0, 0);
    Dialog.addMessage("Sorry but no rectangular selection has been detected."
    +"\nUse the rectangle selection tool to draw a rectangle around the Region of Interest.");
    TryAgainCancelCloseArray=newArray("Try again", "Cancel and Close");
    Dialog.setInsets(5, 150, 0);
    Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2,1, "Try again");
    Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
    // Display the Dialog and get user choice
    Dialog.show();
    UserChoice = Dialog.getRadioButton();
    if (UserChoice=="Cancel and Close"){
      exit(PluginName+" Information\nThe Function "+MacroName+" stopped because no rectangular selection was provided.");
    } else {
      setTool(0); // Preselect rectangular tool
      waitForUser(PluginName+" Information", ""
      +"Please, draw a rectangle around the Region of Interest."
      +"\nWhen done, press OK.");
      CurrentSelection=selectionType();
    }
  }

  setBatchMode("hide");
  run("Clear Results");
  run("Measure");
  ROIPosX=getResult("BX");
  ROIPosY=getResult("BY");
  ROIWidth=getResult("Width");
  ROIHeight=getResult("Height");
  run("Clear Results");

  // Add selection to overlay and save the File
  selectWindow(InputFileNamei);
  run("Remove Overlay");
  run("Overlay Options...", "stroke=cyan width=5 fill=none apply show");
  run("Labels...", "color=magenta font=18 show bold");
  run("Add Selection...");
  saveAs("Tif", OutputImagePath+InputFileNameiNoExt+"_ROI");
  close();


  // Write the threshold and ROI into the CSV File
  print(CSVFile, InputFileNameiNoExt+CellSeparator+ROIPosX+CellSeparator+ROIPosY+CellSeparator+ROIWidth+CellSeparator+ROIHeight+CellSeparator+LowerValue+CellSeparator+UpperValue+LineSeparator);


  // Update the progress bar
  showProgress(Filei, InputFileList.length);
}/////////////////////End of for Filei loop

// Close Threshold windows if it is open
if(isOpen("Threshold")){
  selectWindow("Threshold");
  run("Close");
}//end of if threshold is open

// Close results windows if it is open
if(isOpen("Results")){
  run("Clear Results");
  selectWindow("Results");
  run("Close");
}//end of if Results is open

// Close the CSV File
File.close(CSVFile);
beep();

///////////////////// Closing Dialog Box
Dialog.create(PluginName+" Information");
Dialog.setInsets(0, 0, 0);
Dialog.addMessage(NbFile+" "+ FileExt+ " File in the Folder: \"" +InputDirName+"\" have been processed successfully.");
Dialog.setInsets(10, 0, 0);
Dialog.addMessage("ROI Images are saved in the Folder: \""+OutputDirName+"\".");
Dialog.setInsets(10, 0, 0);
Dialog.addMessage("Coordinates of Region Of Interest and Threshold values are saved in : \""+CSVFileName+".CSV\"");
Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
Dialog.show();

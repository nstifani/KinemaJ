// Function written by Nicolas Stifani nstifani@gmail.com for more info

// Defines Global Variables
requires("1.51n");
var PluginName="KinemaJ";
var MacroName="Track Markers";
var FileExt="TIF";
var MinNbFile=1;
var FolderSuffix="Tracked";
var SubDirArray=newArray("Tables","Labels","Cleaned","Parameters");
CellSeparator= "\t";
LineSeparator="\n";


/////////////// Header, Set Preferences, Options and Housekeeping
// Select All measurements, Invert Y, and use 9 decimals
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
run("Line Width...", "line=1"); // Set Line width as 1
run("Input/Output...", "jpeg=100 gif=-1 file=.txt use copy_row save_column"); // Set Output as Txt and save columns and ignore row numbers
run("Point Tool...", "type=Hybrid color=yellow size=Large label show counter=0");// Set the Point tool as yellow Medium Circle
run("Colors...", "foreground=white background=black selection=yellow"); // Set foreground and background colors Selection is yellow
run("Appearance...", "  menu=0 16-bit=Automatic"); // Change appareance of 16bit image as automatic
run("Misc...", "divide=Infinity"); // Make sure Miscellaneous Options are set correctly
run("Overlay Options...", "stroke=cyan width=2 point=Hybrid size=Large fill=none apply show");
run("Labels...", "color=White font=10 show bold");
call("ij.Prefs.set", "threshold.mode", 0); // Make the ImageJ preferences for threshold visualisation as Red over background

// Set IJ Size and position
IJPosX=screenWidth*0.1; // The position of ImageJ in X // Set IJ Size and position
IJPosY=screenHeight*0; // The position of ImageJ in Y at the top of the screen
IJSizeX=570; // The width of ImageJ toolbar in pixel
IJSizeY=100; // The Height of ImageJ toolbar in pixel
Spacer=25; // A spacer
DummyVariable=eval("script","IJ.getInstance().setLocation("+IJPosX+","+IJPosY+");"); // Adjust the position of the ImageJ toolbar

// Set Toolbar Size and position
ToolbarSizeX=250;// Set Toolbar Size and position
ToolbarSizeY=200; // Size of the toolbar
ToolbarPosX=IJPosX+IJSizeX+Spacer; // Position of the Toolbar is to the right of the ImageJ toolbar
ToolbarPosY=IJPosY; // Position of to the Toolbar in Y

// Position the Toolbar
if(isOpen(PluginName+" Toolbar")){
  selectWindow(PluginName+" Toolbar");
  setLocation(ToolbarPosX,ToolbarPosY);
}

// Set Threshold Window Size and Position
ThresholdSizeX=290;
ThresholdSizeY=260;
ThresholdPosX=ToolbarPosX; // The Position in X of the threshold window is below the toolbar
ThresholdPosY=ToolbarPosY+ToolbarSizeY+Spacer; // Threshold toolbar is just below the plugin toolbar
call("ij.Prefs.set", "threshold.loc", ThresholdPosX+" , "+ThresholdPosY);

// Set ROI Manager Size and Position
ROIManagerSizeX=250;
ROIManagerSizeY=300;
ROIManagerPosX=ToolbarPosX; // The Position in X of the ROI manager window which is to the right of the Treshold widnow
ROIManagerPosY=ToolbarPosY+ToolbarSizeY+Spacer+ThresholdSizeY+Spacer;
call("ij.Prefs.set", "manager.loc", ROIManagerPosX+" , "+ROIManagerPosY);

// Set Results Size and Position to the right of the toolbar until the bottom of Threhsold window
ResultsSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer));
ResultsSizeY=ROIManagerPosY-Spacer;
ResultsPosX=ToolbarPosX+ToolbarSizeX+Spacer;
ResultsPosY=ToolbarPosY;
call("ij.Prefs.set", "results.loc", ResultsPosX+" , "+ResultsPosY);
call("ij.Prefs.set", "results.width", ResultsSizeX);
call("ij.Prefs.set", "results.height", ResultsSizeY);


// Set Log location
LogSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer));
LogSizeY=ROIManagerPosY-Spacer;
LogPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
LogPosY=ToolbarPosY;
call("ij.Prefs.set", "log.loc", LogPosX+" , "+LogPosY);

// Set Debug location
DebugSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer));
DebugSizeY= ROIManagerPosY-Spacer;
DebugPosX=ToolbarPosX+ToolbarSizeX+Spacer; // The Position in X of the ROI manager window
DebugPosY=ToolbarPosY;
call("ij.Prefs.set", "debug.loc", DebugPosX+" , "+DebugPosY);
// Set point Tool location
PointToolSizeX=250;
PointToolSizeY=300;
PointToolPosX= ToolbarPosX+ROIManagerSizeX+Spacer; //PointTool is at the right of the ROI Manager
PointToolPosY= ToolbarPosY+ToolbarSizeY+Spacer+ThresholdSizeY+Spacer;

// Set Brightness and contrast location
BCSizeX=150;
BCSizeY=300;
BCPosX=PointToolPosX+PointToolSizeX+Spacer; // Brigthness and contrsat is at the right of PointTool
BCPosY=ROIManagerPosY;
call("ij.Prefs.set", "b&c.loc", BCPosX+" , "+BCPosY);
//////////////// Header and Housekeeping



//////////////// General Functions
// Function to Append to an array
function Append(ArrayI, Value) {
  ArrayJ = newArray(ArrayI.length+1);
  for (ValueI=0; ValueI<ArrayI.length; ValueI++)
  ArrayJ[ValueI] = ArrayI[ValueI];
  ArrayJ[ArrayI.length] = Value;
  return ArrayJ;
}

// Function to display a message
var MessageDialogPass;
function MessageDialog(Message){
  MessageDialogPass=0;
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(Message);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
  MessageDialogPass=1;
}

// Function to display an error and propose to Fix it / Try again or to quit
var ErrorDialogPass;
var UserResponseErrorDialog;
function ErrorDialog(MessageError, MessageFix, ErrorResponseArray){
  ErrorDialogPass=0;
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageError);
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageFix);
  Dialog.setInsets(0, 0, 0);
  Dialog.setInsets(0, 20, 0);
  Dialog.addRadioButtonGroup("", ErrorResponseArray, ErrorResponseArray.length, 1, ErrorResponseArray[0]);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
  UserResponseErrorDialog=Dialog.getRadioButton();
  return UserResponseErrorDialog;
}

// Function to select an Input Directory containing at least MinNbFile with the correct File Extension FileExt
var SelectInputDirPass; // Switch for the dialog box
var InputDirPath; // Path of the input directory
var ParentDir; // ParentDirectory of the selected input directory
var InputDirName; // Name of the Input Directory
var NbFileWithCorrectExt; // Nb of File with the correct extension in the input directory
var InputItemList; // List of Files and folders in the input directory (all files no matter the extension)
var InputCorrectExtFileList; // List of files with the correct extension
var InputFileList;
var NbFile;

function SelectInputDir(MinNbFile, FileExt){
  // MinNbFile This is the minimum Nb of File to be present in the list to be accepted
  // FileExt This is the File extension as a string example "tif"
  InputDirPath=getDirectory("Select a FOLDER containing at least "+MinNbFile+" "+FileExt+" file(s) to process."); // Select a Folder
  InputItemList=getFileList(InputDirPath); // List of Item in the selected folder
  ParentDir=File.getParent(InputDirPath)+File.separator;
  InputDirName=File.getName(InputDirPath);

  SelectInputDirPass=0; // Switch for the Function
  NbFileWithCorrectExt=0; // Count of Nb of Files
  BaseNameError=0; // Switch to make sure there is only one "." in the filename
  InputCorrectExtFileList=newArray(0);
  UserResponseErrorDialog="";

  // Evaluate the Nb of File with correct extension and add them to InputCorrectExtFileList
  for (ItemI=0; ItemI<InputItemList.length; ItemI++){
    if(endsWith(toLowerCase(InputItemList[ItemI]), "."+toLowerCase(FileExt))){ // Select files with correct extension
      InputCorrectExtFileList=Append(InputCorrectExtFileList, InputItemList[ItemI]);
    }
  }
  NbFileWithCorrectExt=InputCorrectExtFileList.length;
  if(NbFileWithCorrectExt<MinNbFile){ // If the Nb of File with correct extension is not at least equal to the MinNbFile Create Error Message.
    MessageError="Sorry but the folder:\n\"" +InputDirName+"\"\ndoes not contain at least "+MinNbFile+" "+FileExt+" file(s).";
    MessageFix="The function \""+MacroName+"\" requires a folder that contains at least "+MinNbFile+" "+FileExt+" file(s).";
    ErrorResponseArray=newArray("Select Another Folder", "Cancel and Close");
    MessageQuit="The function \""+ MacroName+"\" stopped because the folder:\n\"" +InputDirName+"\"\ndid not contain at least "+MinNbFile+" "+FileExt+" file(s).";
    UserResponseErrorDialog=ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
    if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
      CleanExit(MessageQuit);
    } else if(UserResponseErrorDialog=="Select Another Folder") { // Else user want to select another folder
      SelectInputDirPass=0;
    }
  } else { // if NbFileWithCorrectExt is above or equal MinNbFile Evaluate Filenames
    InputFileList=newArray(0);
    for (FileI=0; FileI<InputCorrectExtFileList.length; FileI++){
      BasenameFileIArray=split(InputCorrectExtFileList[FileI],"."); // Make an array from the filename
      if(BasenameFileIArray.length!=2){// if there is more than one . in the file name abort
        MessageError="Sorry but the "+FileExt+" file:\n\""+InputCorrectExtFileList[FileI]+"\"\ncontains more than one \".\" in its filename.";
        MessageFix="The function \""+MacroName+"\" does NOT allow filenames with more than one unique \".\" used for the file extension.";
        ErrorResponseArray=newArray("Select Another Folder", "Ignore This File", "Cancel and Close");
        MessageQuit="The function \""+ MacroName+"\" stopped because the file\n\""+InputCorrectExtFileList[FileI]+"\"\ncontains more than one \".\"\nMake sure filenames have no more than one unique \".\" for the file extension.";
        UserResponseErrorDialog=ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
        if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
          CleanExit(MessageQuit);
        } else if (UserResponseErrorDialog=="Ignore This File"){

        } else if (UserResponseErrorDialog=="Select Another Folder") {
          FileI=InputCorrectExtFileList.length;
          SelectInputDirPass=0;
        //  ErrorDialogPass=1;
        }
      }else { // If basename is good add it to the InputFileList
        InputFileList=Append(InputFileList, InputCorrectExtFileList[FileI]);
      }
    }
    // Make sure InpuFileList is > MinNbFile
    NbFile=InputFileList.length;
    if(NbFile<MinNbFile && UserResponseErrorDialog!="Select Another Folder"){ // If the Nb of File with correct extension is not at least equal to the MinNbFile Create Error Message.
      MessageError="Sorry but the Folder:\n\"" +InputDirName+"\"\ndoes not contain at least "+MinNbFile+" "+FileExt+" File with no more than one \".\" in its filename.";
      MessageFix="The function \""+MacroName+"\" requires a folder that contains at least "+MinNbFile+" "+FileExt+" File with one unique \".\" used for the file extension.";
      ErrorResponseArray=newArray("Select Another Folder", "Cancel and Close");
      MessageQuit="The function \""+ MacroName+"\" stopped because the Folder:\n\"" +InputDirName+"\"\ndid not contain at least "+MinNbFile+" "+FileExt+" File no more than one \".\" in its filename.";
      UserResponseErrorDialog=ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
      if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
        CleanExit(MessageQuit);
      } else {
        SelectInputDirPass=0;
      }
    } else if (UserResponseErrorDialog=="Select Another Folder"){
      SelectInputDirPass=0; // InputDir Pass the criteria
    } else {
      SelectInputDirPass=1; // InputDir Pass the criteria
    }
  }
} // End of Function Select InputDir

// Function to create a new output directory
var OutputDirPath; // The path of the output directory
var OutputDirName; // The name of the output directory
function CreateOutputDir(ParentDir, InputDirName, FolderSuffix){ // Folder suffix is a string appended to the input Directory
  OutputDirPath=""+ParentDir+InputDirName+"_"+FolderSuffix+File.separator; // Create the outputdirpath
  n=1;
  while(File.exists(OutputDirPath)!=0){ // If the path already exist, increment with _ n until it does not exist
    n++;
    OutputDirPath=""+ParentDir+InputDirName+"_"+FolderSuffix+"_"+n+File.separator;
  } // End of making sure the outpudirectory is a new folder
  File.makeDirectory(OutputDirPath); // Create the outpudirectory
  OutputDirName=File.getName(OutputDirPath); // Get the Name of the output directory
}

////////// Function to create subfolders within the newly create outputdirectory
function CreateOutputSubDir(SubDirArray) { // SubDirArray is an array of the desired subfolders
  for(i=0;i<SubDirArray.length;i++){
    SubDirPath=OutputDirPath+SubDirArray[i]+File.separator; // Because outpudirpath is unique and new the subfolders do not exist yet so no need to check if they are already present
    File.makeDirectory(SubDirPath);
  } // End of for
} // End of CreateOutputSubDir function
// NOTE:It is useful to create a string for the subdirectory paths
// For each element in the subdirarray addMessage
// Output[SubDirArrayElementN]Path=""+OutputDirPath+"[SubDirArrayElementN]"+File.separator;
// Then you can use directly the string to save within a subdirectory

////// Close Function
function CloseAndCleanUp(PluginName, FileI, NbFile, FileExt, InputDirName, OutputDirName){
  beep();

  ListImages=getList("image.titles");
  for(n=0; n<ListImages.length; n++){
    ImageN=ListImages[n];
    selectWindow(ImageN);    run("Close");
  }


  /////////////////////// Closing Dialog Box
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(FileI+" of "+ NbFile+" "+ FileExt+ " file(s) in the folder:\n\""+InputDirName+"\"\nhave been processed successfully.");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage("Files are saved in the following folder:\n\""+OutputDirName+"\".");
  Dialog.setInsets(0, 0, 0);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
}  ///////////////////////// End of Close Function

////// CleanExit Function
function CleanExit(MessageQuit){
  beep();
  if(isOpen("Threshold")){    selectWindow("Threshold");    run("Close");  }//end of if threshold is open
  if(isOpen("Results")){    run("Clear Results");    selectWindow("Results");    run("Close");  }//end of if Results is open
  if(isOpen("ROI Manager")){    roiManager("reset");    selectWindow("ROI Manager");    run("Close");  }//End of Close the ROI Manager
  if(isOpen("B&C")){    selectWindow("B&C");    run("Close");  }//End of Close the Brightness window

  ListImages=getList("image.titles");
  for(n=0; n<ListImages.length; n++){
    ImageN=ListImages[n];
    selectWindow(ImageN);    run("Close");

  }
Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageQuit);
  Dialog.setInsets(0, 0, 0);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
  exit();
}  ///////////////////////// End of CleanExit Function

//////////Close UtilityWindows
function CloseUtilityWindows(ListUtilityWindows){
// Typically  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  for(WindowI=0; WindowI<ListUtilityWindows.length; WindowI++){
    UtilityWindowI=ListUtilityWindows[WindowI];
    if(isOpen(UtilityWindowI)){
      if(UtilityWindowI=="Results"){        run("Clear Results");       }
      if(UtilityWindowI=="ROI Manager"){       roiManager("reset");      }
        selectWindow(UtilityWindowI); run("Close");
      }
  }
}
//////////End of Close UtilityWindows
////////////////////End of General Functions
RequiredSubfolderArray=newArray("Cropped", "Thresholded");
var MasterInputDirPass=0;
var MasterInputDirName;
var MasterInputDirPath;
///////////////// Specific function
function SelectMasterInputDir(MinNbFile, FileExt, RequiredSubfolderArray){
  // MinNbFile This is the minimum Nb of File to be present in the list to be accepted
  // FileExt This is the File extension as a string example "TIF" or "AVI"
  // InputList is ALL the Files within the input Directory
  // InputFileList is the list of Files with the correct File extension
  // RequiredSubRequiredSubfolderArray is an Array of required subfolder to be witin the select

  /////////////////////// Select MasterInput Directory
  MasterInputDirPath=getDirectory("Select the FOLDER containing the Cropped and Thresholded Subfolders.");
  MasterInputList=getFileList(MasterInputDirPath);
  MasterParentDir=File.getParent(MasterInputDirPath)+File.separator;
  MasterInputDirName=File.getName(MasterInputDirPath);
  /////////////////////// Select Input Directory
  MasterInputDirPass=0;

  // Make Sure the right folder is selected
  if(matches(MasterInputDirName, ".*_Cropped and Thresholded_?[0-9]*")!=1){
    Dialog.create(PluginName+" Information");
    Dialog.setInsets(0, 0, 0);
    Dialog.addMessage("Sorry but \""+MasterInputDirName+"\" is not a \"_Cropped and Thresholded\" Folder.");
    TryAgainCancelCloseArray=newArray("Try again", "Cancel and Close");
    Dialog.setInsets(5, 150, 0);
    Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2,1, "Try again");
    Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
    // Display the Dialog and get user choice
    Dialog.show();
    UserChoice = Dialog.getRadioButton();
    if (UserChoice=="Cancel and Close"){
      exit(PluginName+" "+MacroName+" stopped because \""+MasterInputDirName+"\" was not a \"_Cropped and Thresholded\" Folder.");
    }
  } else {

    // Evaluate if the RequiredSubfolders are present in the MasterFolder
    MasterInputListString="";
    for (n=0;n<MasterInputList.length;n++){
      MasterInputListString=MasterInputListString+"\n"+replace(MasterInputList[n],File.separator,"");
    }

    SubfolderPass=0;
    for (ItemI=0; ItemI<RequiredSubfolderArray.length; ItemI++){ // Screen the RequiredItem List
      if(indexOf(MasterInputListString , RequiredSubfolderArray[ItemI])>0){ // if RequiredItem is Present in the ItemList
        SubfolderPass++;
      } // end of If present increment
    } // end of for




    // If the Master folder does not contain reuqired subfolder
    if(SubfolderPass!=RequiredSubfolderArray.length){
      Dialog.create(PluginName+" Information");
      Dialog.setInsets(0, 0, 0);
      Dialog.addMessage("Sorry but the Folder: \"" +MasterInputDirName+"\" does not contain the required Subfolders: \""+RequiredSubfolderArray[0]+"\" and \""+RequiredSubfolderArray[1]+"\".");
      Dialog.setInsets(0, 0, 0);
      Dialog.addMessage(MacroName+" requires a Folder that contains at least \""+RequiredSubfolderArray[0]+"\" and \""+RequiredSubfolderArray[1]+"\" SubFolders.");
      Dialog.setInsets(0, 0, 0);
      TryAgainCancelCloseArray=newArray("Try Again", "Cancel & Close");
      Dialog.setInsets(0, 100, 0);
      Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2, 1, "Try Again");
      Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
      Dialog.show();
      UserChoice=Dialog.getRadioButton();
      if (UserChoice=="Cancel & Close"){
        exit(PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Folder: \"" +InputDirName+"\" did not contain the required Subfolders: \""+RequiredSubfolderArray[0]+"\" and \""+RequiredSubfolderArray[1]+"\".");
      } /////////////////////// End user choice

    } else {

      CroppedInputList=getFileList(MasterInputDirPath+"Cropped"+File.separator);
      ThresholdedInputList=getFileList(MasterInputDirPath+"Thresholded"+File.separator);

      NbCroppedTIF=0;
      // Evaluate the Nb of File in the Cropped
      for (ItemI=0; ItemI<CroppedInputList.length; ItemI++){
        if(endsWith(toLowerCase(CroppedInputList[ItemI]), "."+toLowerCase(FileExt))){
          Basename=split(CroppedInputList[ItemI],".");
          if(Basename.length!=2){
            exit(PluginName+" Information\nThe Function "+MacroName+" stopped because the File \""+CroppedInputList[ItemI]+"\" contains more than one \".\"\nMake sure filnames have no \".\" at the exception of File extension.");
          }
          NbCroppedTIF++;
        } // If ends by Extension increment nbTFile
      }


      NbTresholdedTIF=0;
      // Evaluate the Nb of File in the Cropped
      for (ItemI=0; ItemI<ThresholdedInputList.length; ItemI++){
        if(endsWith(toLowerCase(ThresholdedInputList[ItemI]), "."+toLowerCase(FileExt))){
          Basename=split(ThresholdedInputList[ItemI],".");
          if(Basename.length!=2){
            exit(PluginName+" Information\nThe Function "+MacroName+" stopped because the File \""+ThresholdedInputList[ItemI]+"\" contains more than one \".\"\nMake sure filnames have no \".\" at the exception of File extension.");
          }
          NbTresholdedTIF++;
        } // If ends by Extension increment nbTFile
      }
      if (NbCroppedTIF<MinNbFile || NbTresholdedTIF<MinNbFile){
        Dialog.create(PluginName+" Information");
        Dialog.setInsets(0, 0, 0);
        Dialog.addMessage("Sorry but the Subfolders in: \"" +MasterInputDirName+"\" do not contain at least "+MinNbFile+" "+FileExt+" File.");
        Dialog.setInsets(0, 0, 0);
        Dialog.addMessage(MacroName+" requires a Folder that contains Subfolders with at least "+MinNbFile+" "+FileExt+" File.");
        Dialog.setInsets(0, 0, 0);
        TryAgainCancelCloseArray=newArray("Try Again", "Cancel & Close");
        Dialog.setInsets(0, 100, 0);
        Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2, 1, "Try Again");
        Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
        Dialog.show();
        UserChoice=Dialog.getRadioButton();
        if (UserChoice=="Cancel & Close"){
          exit(PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Folder: \"" +InputDirName+"\" did not contain Subfolders with at least "+MinNbFile+" "+FileExt+" File.");
        } /////////////////////// End user choice
      } else {

        ThresholdedInputListString="";
        // Make sure all Cropped file have a corresponding Thresholded version
        for (n=0; n<ThresholdedInputList.length; n++){
          ThresholdedInputListString=ThresholdedInputListString+"\n"+ThresholdedInputList[n];
        }

        RequiredFilePass=0;
        for (ItemI=0; ItemI<CroppedInputList.length; ItemI++){ // Screen the RequiredItem List
          if(indexOf(ThresholdedInputListString , CroppedInputList[ItemI])>0){ // if RequiredItem is Present in the ItemList
            RequiredFilePass++;
          } // end of If present increment
        } // end of for

        if(RequiredFilePass!=CroppedInputList.length){
          Dialog.create(PluginName+" Information");
          Dialog.setInsets(0, 0, 0);
          Dialog.addMessage("Sorry but the Folder: \"Thresholded\" does not contain all the "+FileExt+" Files present in the Folder: \"Cropped\".");
          Dialog.setInsets(0, 0, 0);
          Dialog.addMessage(MacroName+" requires matching "+FileExt+" Files in the \"Cropped\" and \"Thresholded\" Folders.");
          Dialog.setInsets(0, 0, 0);
          TryAgainCancelCloseArray=newArray("Try Again", "Cancel & Close");
          Dialog.setInsets(0, 100, 0);
          Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2, 1, "Try Again");
          Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
          Dialog.show();
          UserChoice=Dialog.getRadioButton();
          if (UserChoice=="Cancel & Close"){
            exit(PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Folder: \"Thresholded\" did not contain all the "+FileExt+" Files present in the Folder: \"Cropped\".");
          } /////////////////////// End user choice
        } else {
          MasterInputDirPass=1;
          NbFile=NbCroppedTIF;
          InputFileList=newArray(NbFile);
          n=0;
          // Evaluate the Nb of File in the Cropped
          for (ItemI=0; ItemI<CroppedInputList.length; ItemI++){
            if(endsWith(toLowerCase(CroppedInputList[ItemI]), "."+toLowerCase(FileExt))){
              InputFileList[n]=CroppedInputList[ItemI];
              n++;
            } // If ends by Extension increment nbTFile
          }// end of for
        }// end of else if required file matchs
      }// end of Else Nb Ext File is > MinNbFile
    }// End of Else the folder has the correct subfolders
  } // End of Else the folder has the right name
}//SelectMasterInputDir function
///////////End of specific funciton












//Macros starts here
// Intial Message
InitialMessage="The function \""+MacroName+"\" will:"
+"\n - Prompt to select a \"Cropped and Thresholded\" folder containing at least "+MinNbFile+" "+FileExt+" file(s) to process"
+"\n\nFor each "+FileExt+" file:"
+"\n - Search and track markers"
+"\n - Prompt user for validation"
+"\n - Re-analyze the video with adjusted parameters until satisfied"
+"\n - Save the cleaned videos, labeled videos and the  tracked trajectories as TIF files"
+"\n - Save the result tables as TXT files";

MessageDialog(InitialMessage); // Display the Initial Message

do{
  SelectMasterInputDir(MinNbFile,FileExt,RequiredSubfolderArray);
}while(MasterInputDirPass!=1)



var OutputDirPath;
var OutputDirName;
// Create OutputDirectory with the Folder suffix
InputDirName=replace(MasterInputDirName,"_Cropped and Thresholded_?[0-9]*","");
CreateOutputDir(ParentDir, InputDirName, FolderSuffix);

// // Create Output Subdirectory and create general variables for each SubdirectoryOuputdir Path
var SubDirArray=newArray("Tables","Labels","Cleaned","Parameters");
CreateOutputSubDir(SubDirArray);
// //////////////////////////// End of Create an unique output directory
OutputDirPathTables=""+OutputDirPath+"Tables"+File.separator;
OutputDirPathLabels=""+OutputDirPath+"Labels"+File.separator;
OutputDirPathCleaned=""+OutputDirPath+"Cleaned"+File.separator;
OutputDirPathParameters=""+OutputDirPath+"Parameters"+File.separator;


//////////////////////////Process each file
for (FileI = 0; FileI < InputFileList.length; FileI++){
  setBatchMode(true);
  InputFileNameI = InputFileList[FileI];
  Basename=split(InputFileNameI, ".");
  InputFileNameINoExt=Basename[0];
  InputFilePathI = MasterInputDirPath+"Thresholded"+File.separator+InputFileNameI;
  open(InputFilePathI);

  if(nSlices==1){
    Dialog.create(PluginName+" Information");
    Dialog.addMessage("Sorry \"" + InputFileNameINoExt+ "\" is not a Stack."
    +"\nPlease use Analyze>Analyze particles... to detect Markers on images. "
    +"\nKinemaJ will ignore \""+InputFileNameINoExt+"\" and proceed to the next file.");
    Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
    Dialog.show();
    selectWindow(InputFileNameI);
    close();
  } else if (nSlices>1){
    /////////////////////// Get automatic tracking parameters
    run("Duplicate...", "title=FirstFrame duplicate range=1-1");
    selectWindow("FirstFrame");
    run("Set Measurements...", "area bounding redirect=None decimal=3");
    run("Analyze Particles...", "size=1-Infinity show=Nothing display clear");
    selectWindow("FirstFrame");
    close();

    // Get the Results
    if(nResults>0){ // If there is any result get the arrays
      AreaArray=newArray(nResults);
      DistanceArray=newArray(nResults-1); // This is the distance between two markers
      for (n=0;n<nResults;n++){
        AreaArray[n]=getResult("Area",n); // This will define the Marker Size
        if (n<nResults-1){ // This calculates the distance between two consecutive detected marker and will estimate the velocity
          DistanceArray[n]=sqrt(pow((getResult("BX",n)-getResult("BX",n+1)),2)+pow((getResult("BY",n)-getResult("BY",n+1)),2));
        }// End of Populate distance array
      } // End of Populate arrays

      // Get the Statistics of the Arrays
      Array.getStatistics(AreaArray, MinArea, MaxArea, MeanArea, StdDevArea);
      Array.getStatistics(DistanceArray, MinDistance, MaxDistance, MeanDistance, StdDevDistance);
      // Defines the Tracking parameters
      MinMarkerSize=floor(MeanArea*0.25);
      MaxMarkerSize=round(MeanArea*4);
      MaxMarkerVelocity=floor(MeanDistance*0.75); // Using the MaxMarker velocity right below the minimum distance between marker to avoid track mixing
      selectWindow(InputFileNameI);
      getDimensions(ImageWidth, ImageHeight, NBchannels, NBFrames, NBStacks);
      MinTrackLength=floor(NBFrames/9); // why 9? Because ImageJ jump by 10% when clicking on the stack scroll bar

      if(isOpen("Results")){
        run("Clear Results");
        selectWindow("Results");
        run("Close");
      }
    } else if (!(nResults>0)){ // else if there is no results prompt the user to select manually the parameters
      DialogPass=0;
      while(DialogPass!=1){
        Dialog.create(PluginName+" Information");
        Dialog.setInsets(0, 0, 0);
        Dialog.addMessage("Sorry but "+MacroName+" could not automatically determine the Tracking Parameters.");
        Dialog.setInsets(0, 0, 0);
        Dialog.addMessage("Please defines manually the tracking parameters:");
        Dialog.addNumber("Min Marker Size", 5, 0, 5, " Pixel^2");
        Dialog.addNumber("Max Marker Size", 500, 0, 5,  " Pixel^2");
        Dialog.addNumber("Max Marker Velocity", 50, 0, 5," Pixel/Frame");
        Dialog.addNumber("Min Track duration", 5, 0, 6, " Frame");
        Dialog.setInsets(0, 0, 0);
        TryAgainCancelCloseArray=newArray("Try Again", "Cancel & Close");
        Dialog.setInsets(0, 100, 0);
        Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2, 1, "Try Again");
        Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
        Dialog.show();
        MinMarkerSize=Dialog.getNumber();
        MaxMarkerSize=Dialog.getNumber();
        MaxMarkerVelocity=Dialog.getNumber();
        MinTrackLength=Dialog.getNumber();
        UserChoice=Dialog.getRadioButton();
        if (UserChoice=="Cancel & Close"){
          exit(PluginName+ " Information:\nThe function "+ MacroName+" stopped because the Tracking Parameters were not provided");
        } else { // end of userchocie is not cancel
          if(isNaN(MinMarkerSize)==1 || MinMarkerSize<0 || isNaN(MaxMarkerSize)==1 || MaxMarkerSize<0 || isNAN(MaxMarkerVelocity)==1 || MaxMarkerVelocity<0 || isNAN(MinTrackLength)==1 || MinTrackLength<0 || MinTrackLength>nSlices){
            if(MinTrackLength>nSlices){
              ErrorMessage="Min Track duration must be an integer between 0 and "+nSlices;
            } else {
              ErrorMessage="Sorry but Tracking Parameteres must be positive numbers.";
            }
            Dialog.create(PluginName+" Information");
            Dialog.setInsets(0, 0, 0);
            Dialog.addMessage(ErrorMessage);
            TryAgainCancelCloseArray=newArray("Try again", "Cancel and Close");
            Dialog.setInsets(5, 150, 0);
            Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2,1, "Try again");
            Dialog.setLocation(IJPosX, IJPosY+IJSizeY+Spacer);
            // Display the Dialog and get user choice
            Dialog.show();
            UserChoice = Dialog.getRadioButton();
          } else { // end of if Tracking Parameters not cool
            DialogPass=1;
          } // end of else dialog pass
        } // end of else userchoice is not cancel so it is try again
      } // end of While Dialog is not passed
    } // end of if parameters can't be set automatically

    // Exit batch mode and track the markers
    setBatchMode("exit and display");
    NextStepChoice="Re-Analyze Current File";

    while(NextStepChoice=="Re-Analyze Current File"){
      run("Set Measurements...", " redirect=None decimal=3");
      // Set the parameters of Mtrack2
      call("MTrack2_.setProperty","minSize",MinMarkerSize);
      call("MTrack2_.setProperty","maxSize",MaxMarkerSize);
      call("MTrack2_.setProperty","minTrackLength",MinTrackLength);
      call("MTrack2_.setProperty","maxVelocity",MaxMarkerVelocity);
      call("MTrack2_.setProperty","saveResultsFile","false");
      call("MTrack2_.setProperty","showPaths","false");
      call("MTrack2_.setProperty","showPathLengths","false");
      call("MTrack2_.setProperty","showPositions","false");
      call("MTrack2_.setProperty","showLabels","true");
      call("MTrack2_.setProperty","skipDialogue","true");

      selectWindow(InputFileNameI);
      setLocation(IJPosX,IJPosY+IJSizeY+Spacer,IJSizeX,screenHeight*0.3);
      getLocationAndSize(ThresholdedImagePosX, ThresholdedImagePosY, ThresholdedImageSizeX, ThresholdedImageSizeY);
      run("MTrack2");
      selectWindow(InputFileNameI+" labels");
      rename("Tracked");
      setLocation(IJPosX,IJPosY+IJSizeY+Spacer+ThresholdedImageSizeY+Spacer,IJSizeX, screenHeight*0.3);
      getLocationAndSize(TrackedImagePosX,TrackedImagePosY,TrackedImageSizeX,TrackedImageSizeY);

      if(!isOpen("Original")){ // Open the Cropped file if it is not already opened and call it Original
        InputFilePathiCropped = MasterInputDirPath+"Cropped"+File.separator+InputFileNameI;
        open(InputFilePathiCropped);
        rename("Original");
      }
      selectWindow("Original");
      setLocation(TrackedImagePosX,TrackedImagePosY+TrackedImageSizeY+Spacer,IJSizeX, screenHeight-(TrackedImagePosY+TrackedImageSizeY+Spacer));
      getLocationAndSize(OriginalImagePosX,OriginalImagePosY,OriginalImageSizeX,OriginalImageSizeY);

      if(!isOpen("Synchronize Windows")){
        run("Synchronize Windows");
        selectWindow("Synchronize Windows");
        }
        selectWindow("Synchronize Windows");
        setLocation(OriginalImagePosX+OriginalImageSizeX+Spacer,OriginalImagePosY);

      /////////////////// Wait for User interaction
      setForegroundColor(255, 255, 255); // Foreground is white
      setBackgroundColor(0, 0, 0); // Background is black
      setTool(17); // Select the Bursh
      selectWindow(InputFileNameI);

      waitForUser("KinemaJ Information", ""
      +"- Inspect the tracked video (middle)"
      +"\n- Correct any missing marker in the Thresholded video (top)"
      +"\n- Use the Original video as reference (bottom)"
      +"\n- Select z-Slices and click Synchronize All to Synchronize the Windows"
      +"\n \nPress OK to Re-Analyze or to Save the Results & Move to the Next File.");


      /////////// Dialog for Move on Next file or Redo Processing
      Dialog.create(PluginName+" Information");
      NextStepArray=newArray("Re-Analyze Current File", "Save and Move to Next File");
      Dialog.setInsets(0, 10, 0);
      Dialog.addMessage("What to do Next?");
      Dialog.setInsets(0, 0, 0);
      Dialog.addRadioButtonGroup("", NextStepArray, 2,1, "Re-Analyze Current File");
      Dialog.setLocation(TrackedImagePosX+TrackedImageSizeX+Spacer,TrackedImagePosY);
      Dialog.show();
      NextStepChoice = Dialog.getRadioButton();

      /////////////////// If Re-Analyze Display Dialog and Update Tracking parameters
      if(NextStepChoice=="Re-Analyze Current File"){
        DialogPass=0;
        while(DialogPass!=1){
          ProcessingArray=newArray("Reduce Markers", "Amplify Markers", "Remove Noise", "Unmerge Markers");
          ProcessingDefaultArray=newArray(false,false,false,false);
          Dialog.create(PluginName+" Information");
          Dialog.setInsets(0, 0, 0);
          Dialog.addMessage("If necessary select an option below:");
          Dialog.setInsets(0, 0, 0);
          Dialog.addCheckbox("Flip the Video Horizontally", false);
          Dialog.setInsets(0, 0, 0);
          Dialog.addCheckboxGroup(2,2,ProcessingArray,ProcessingDefaultArray);
          Dialog.addMessage("Adjust Tracking parameters:");
          Dialog.addNumber("Min Marker Size (was " + MinMarkerSize+")", MinMarkerSize, 0, 5, " Pixel^2");
          Dialog.addNumber("Max Marker Size (was " + MaxMarkerSize+")", MaxMarkerSize, 0, 5,  " Pixel^2");
          Dialog.addNumber("Max Marker Velocity (was " + MaxMarkerVelocity+")", MaxMarkerVelocity, 0, 5," Pixel/Frame");
          Dialog.addNumber("Min Track duration (was " + MinTrackLength+")", MinTrackLength, 0, 6, " Frame (Max "+nSlices+")");
          Dialog.setLocation(TrackedImagePosX+TrackedImageSizeX+Spacer,TrackedImagePosY);
          Dialog.show();
          FlipChoice=Dialog.getCheckbox();
          ReduceMarkerChoice=Dialog.getCheckbox();
          AmplifyMarkerChoice=Dialog.getCheckbox();
          RemoveNoiseChoice=Dialog.getCheckbox();
          UnmergeMarkerChoice=Dialog.getCheckbox();
          MinMarkerSizeNew=Dialog.getNumber();
          MaxMarkerSizeNew=Dialog.getNumber();
          MaxMarkerVelocityNew=Dialog.getNumber();
          MinTrackLengthNew=Dialog.getNumber();

          if(isNaN(MinMarkerSizeNew)==1 || MinMarkerSizeNew<0 || isNaN(MaxMarkerSizeNew)==1 || MaxMarkerSizeNew<0 || isNaN(MaxMarkerVelocityNew)==1 || MaxMarkerVelocityNew<0 || isNaN(MinTrackLengthNew)==1 || MinTrackLengthNew<0 || MinTrackLengthNew>nSlices){
            if(MinTrackLengthNew>nSlices){
              ErrorMessage="Min Track duration must be an integer between 0 and "+nSlices;
            } else {
              ErrorMessage="Sorry but Tracking Parameteres must be positive numbers.";
            }
            Dialog.create(PluginName+" Information");
            Dialog.setInsets(0, 0, 0);
            Dialog.addMessage(ErrorMessage);
            TryAgainCancelCloseArray=newArray("Try again", "Cancel and Close");
            Dialog.setInsets(5, 150, 0);
            Dialog.addRadioButtonGroup("", TryAgainCancelCloseArray, 2,1, "Try again");
            Dialog.setLocation(TrackedImagePosX+TrackedImageSizeX+Spacer,TrackedImagePosY);
            // Display the Dialog and get user choice
            Dialog.show();
            UserChoice = Dialog.getRadioButton();
          } else {
            MinMarkerSize=MinMarkerSizeNew;
            MaxMarkerSize=MaxMarkerSizeNew;
            MaxMarkerVelocity=MaxMarkerVelocityNew;
            MinTrackLength=MinTrackLengthNew;
            DialogPass=1;
          }//end of else
        } // end of while DialogPass

        selectWindow("Tracked"); // Close the previously tracked version
        close();
        run("Clear Results");


        // Apply the processing options
        if(FlipChoice==1){
          selectWindow(InputFileNameI);
          run("Flip Horizontally", "stack");
          if(isOpen("Original")){ // Open the Cropped file if it is not already opened and call it Original
            selectWindow("Original");
            run("Flip Horizontally", "stack");
          }
          FlipChoice==0; // Reset the processing option to default
        }

        if(RemoveNoiseChoice==1){
          selectWindow(InputFileNameI);
          run("Open", "stack");
          RemoveNoiseChoice==0; // Reset the processing option to default
        }

        if(AmplifyMarkerChoice==1){
          selectWindow(InputFileNameI);
          run("Dilate", "stack");
          AmplifyMarkerChoice==0; // Reset the processing option to default
        }

        if(UnmergeMarkerChoice==1){
          selectWindow(InputFileNameI);
          run("Watershed", "stack");
          UnmergeMarkerChoice==0; // Reset the processing option to default
        }

        if(ReduceMarkerChoice==1){
          selectWindow(InputFileNameI);
          run("Erode", "stack");
          ReduceMarkerChoice==0; // Reset the processing option to default
        }
      } /////////////////// If Re-Analyze Display Dialog and Update Tracking parameters
    } //////////////////////////////// End of while loop Next step choice is Re-Analyze

    /////////////////// If Choice is Save and Move to Next File
    if(NextStepChoice=="Save and Move to Next File"){
      selectWindow("Original");
      close();
      selectWindow("Tracked");
      saveAs("Tif", OutputDirPathLabels+InputFileNameINoExt+"_Labels.tif");
      close();
      selectWindow(InputFileNameI);
      setBatchMode(true);
      ////////// Re Run the Mtrack2 but saving the data this time in CSV file
      // Create output path name for excel file
      OutputTablePathi=OutputDirPathTables+InputFileNameINoExt+".CSV";
      // Invert the Y coordinates
      run("Set Measurements...", "invert redirect=None decimal=3");
      // Set the parameters of Mtrack2
      call("MTrack2csv_.setProperty","minSize",MinMarkerSize);
      call("MTrack2csv_.setProperty","maxSize",MaxMarkerSize);
      call("MTrack2csv_.setProperty","minTrackLength",MinTrackLength);
      call("MTrack2csv_.setProperty","maxVelocity",MaxMarkerVelocity);
      call("MTrack2csv_.setProperty","saveResultsFile","true");
      call("MTrack2csv_.setProperty","showPaths","false");
      call("MTrack2csv_.setProperty","showPathLengths","false");
      call("MTrack2csv_.setProperty","showPositions","false");
      call("MTrack2csv_.setProperty","showLabels","false");
      call("MTrack2csv_.setProperty","skipDialogue","true");
      run("MTrack2csv", "save=&OutputTablePathi");
      // Restore the Y coordinates
      run("Set Measurements...", "redirect=None decimal=3");
      run("Clear Results");

      // Save the Cleaned version of the file
      selectWindow(InputFileNameI);
      saveAs("Tif", OutputDirPathCleaned+InputFileNameINoExt+"_Cleaned.tif");
      close();

      // Save the Tracking parameters
      ParametersData = File.open(OutputDirPathParameters+InputFileNameINoExt+"_TrackingParameters.csv");
      CellSeparator= ",";
      LineSeparator="\n";
      print(ParametersData, "Filename"+CellSeparator+InputFileNameINoExt+LineSeparator);
      print(ParametersData, "Min Marker Size (pixel^2)"+CellSeparator+MinMarkerSize+LineSeparator);
      print(ParametersData, "Max Marker Size (pixel^2)"+CellSeparator+MaxMarkerSize+LineSeparator);
      print(ParametersData, "Max Marker Velocity (pixel/frame)"+CellSeparator+MaxMarkerVelocity+LineSeparator);
      print(ParametersData, "Min Track duration (frame)"+CellSeparator+MinTrackLength+LineSeparator);
      File.close(ParametersData);
    } /////////////////// If Choice is Save and Move to Next File

  } // If nSlices>1

  // Update the progress bar
  showProgress(FileI, InputFileList.length);
}/////////////////////End of for FileI loop

// Restore the MTack2 dialog box
call("MTrack2_.setProperty","skipDialogue","false");
// Restore the MTack2 dialog box
call("MTrack2csv_.setProperty","skipDialogue","false");

CloseAndCleanUp(PluginName, FileI, NbFile, FileExt, MasterInputDirName, OutputDirName);

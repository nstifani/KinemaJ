// Function written by Nicolas Stifani nstifani@gmail.com for more info

// Defines Global Variables
requires("1.51n");
var PluginName="KinemaJ";
var MacroName="Crop and Threshold Videos";
var FileExt="AVI";
var MinNbFile=1;
var FolderSuffix="Cropped and Thresholded";
var SubDirArray=newArray("Cropped", "Thresholded");
CellSeparator= "\t";
LineSeparator="\n";



//////////////////////////////////////////////// Header, Set Preferences, Options and Housekeeping
// Select All measurements, Invert Y, and use 9 decimals
run("Set Measurements...", "area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack display invert redirect=None decimal=9");
run("Line Width...", "line=1"); // Set Line width as 1
run("Input/Output...", "jpeg=100 gif=-1 file=.txt use copy_row save_column"); // Set Output as Txt and save columns and ignore row numbers
run("Point Tool...", "type=Hybrid color=yellow size=Large label show counter=0"); // Set the Point tool as yellow Medium Circle
run("Colors...", "foreground=white background=black selection=yellow"); // Set foreground and background colors Selection is yellow
run("Appearance...", "  menu=0 16-bit=Automatic"); // Change appareance of 16bit image as automatic
run("Misc...", "divide=Infinity"); // Make sure Miscellaneous Options are set correctly
run("Overlay Options...", "stroke=cyan width=2 point=Hybrid size=Large fill=none apply show"); // Overlay Options
run("Labels...", "color=White font=10 show bold"); // Labels options
call("ij.Prefs.set", "threshold.mode", 0); // Make the ImageJ preferences for threshold visualisation as Red over background

// Set IJ Size and position
IJPosX=screenWidth*0.1; // The position of ImageJ in X // Set IJ Size and position
IJPosY=screenHeight*0; // The position of ImageJ in Y at the top of the screen
IJSizeX=570; // The width of ImageJ toolbar in pixel
IJSizeY=100; // The Height of ImageJ toolbar in pixel
Spacer=25; // A spacer
DummyVariable=eval("script","IJ.getInstance().setLocation("+IJPosX+","+IJPosY+");"); // Adjust the position of the ImageJ toolbar

// Set Toolbar Size and position
ToolbarSizeX=250; // Set Toolbar Size and position
ToolbarSizeY=200; // Size of the toolbar
ToolbarPosX=IJPosX+IJSizeX+Spacer; // Position of the Toolbar is to the right of the ImageJ toolbar
ToolbarPosY=IJPosY; // Position of to the Toolbar in Y

// Position the Toolbar
if(isOpen(PluginName+" Toolbar")){selectWindow(PluginName+" Toolbar"); setLocation(ToolbarPosX,ToolbarPosY);}

// Set Threshold Window Size and Position
ThresholdSizeX=290;
ThresholdSizeY=260;
ThresholdPosX=ToolbarPosX; // The Position in X of the threshold window is below the toolbar
ThresholdPosY=ToolbarPosY+ToolbarSizeY+Spacer; // Threshold toolbar is just below the plugin toolbar
call("ij.Prefs.set", "threshold.loc", ThresholdPosX+" , "+ThresholdPosY); // Save in the preferences

// Set ROI Manager Size and Position
ROIManagerSizeX=250;
ROIManagerSizeY=300;
ROIManagerPosX=ToolbarPosX; // The Position in X of the ROI manager window
ROIManagerPosY=ToolbarPosY+ToolbarSizeY+Spacer+ThresholdSizeY+Spacer;
call("ij.Prefs.set", "manager.loc", ROIManagerPosX+" , "+ROIManagerPosY); // Save in the preferences

// Set Results Size and Position
ResultsSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer));
ResultsSizeY=ROIManagerPosY-Spacer;
ResultsPosX=ToolbarPosX+ToolbarSizeX+Spacer;
ResultsPosY=ToolbarPosY;
call("ij.Prefs.set", "results.loc", ResultsPosX+" , "+ResultsPosY);  // Save in the preferences
call("ij.Prefs.set", "results.width", ResultsSizeX); // Save in the preferences
call("ij.Prefs.set", "results.height", ResultsSizeY); // Save in the preferences

// Set Log location
LogSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer));
LogSizeY=ROIManagerPosY-Spacer;
LogPosX=ToolbarPosX+ToolbarSizeX+Spacer;
LogPosY=ToolbarPosY;
call("ij.Prefs.set", "log.loc", LogPosX+" , "+LogPosY); // Save in the preferences

// Set Debug location
DebugSizeX=(screenWidth-(ToolbarPosX+ToolbarSizeX+Spacer));
DebugSizeY= ROIManagerPosY-Spacer;
DebugPosX=ToolbarPosX+ToolbarSizeX+Spacer;
DebugPosY=ToolbarPosY;
call("ij.Prefs.set", "debug.loc", DebugPosX+" , "+DebugPosY); // Save in the preferences

// Set point Tool location
PointToolSizeX=250;
PointToolSizeY=300;
PointToolPosX= ToolbarPosX+ROIManagerSizeX+Spacer;
PointToolPosY= ToolbarPosY+ToolbarSizeY+Spacer+ThresholdSizeY+Spacer;

// Set Brightness and contrast location
BCSizeX=150;
BCSizeY=300;
BCPosX=PointToolPosX+PointToolSizeX+Spacer;
BCPosY=ROIManagerPosY;
call("ij.Prefs.set", "b&c.loc", BCPosX+" , "+BCPosY);  // Save in the preferences
//////////////////////////////////////////////// Header and Housekeeping




//////////////////////////////////////////////// General Functions
/////////////////////////// Function to Append to an array
function Append(ArrayI, Value) {
  ArrayJ = newArray(ArrayI.length+1);
  for (ValueI=0; ValueI<ArrayI.length; ValueI++)
  ArrayJ[ValueI] = ArrayI[ValueI];
  ArrayJ[ArrayI.length] = Value;
  return ArrayJ;
}
/////////////////////////// Function to Append to an array

/////////////////////////// Function to display a message
var MessageDialogPass;
function MessageDialog(Message){
  MessageDialogPass=0;
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(Message);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
  MessageDialogPass=1;
}
/////////////////////////// Function to display a message

/////////////////////////// Function to display an error and propose to options
var ErrorDialogPass;
var UserResponseErrorDialog;
function ErrorDialog(MessageError, MessageFix, ErrorResponseArray){
  ErrorDialogPass=0;
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageError);
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageFix);
  Dialog.setInsets(0, 0, 0);
  Dialog.setInsets(0, 20, 0);
  Dialog.addRadioButtonGroup("", ErrorResponseArray, ErrorResponseArray.length, 1, ErrorResponseArray[0]);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  Dialog.show();
  UserResponseErrorDialog=Dialog.getRadioButton();
  return UserResponseErrorDialog;
}
/////////////////////////// Function to display an error and propose to options

/////////////////////////// Function to select an Input Directory
// containing at least MinNbFile with the correct File Extension FileExt
// This function also prevents from having files with more than one . in their filenames
var SelectInputDirPass; // Switch for the dialog box
var InputDirPath; // Path of the input directory
var ParentDir; // ParentDirectory of the selected input directory
var InputDirName; // Name of the Input Directory
var NbFileWithCorrectExt; // Nb of File with the correct extension in the input directory
var InputItemList; // List of Files and folders in the input directory (all files no matter the extension)
var InputCorrectExtFileList; // List of files with the correct extension
var InputFileList;
var NbFile;

function SelectInputDir(MinNbFile, FileExt){
  // MinNbFile This is the minimum Nb of File to be present in the list to be accepted
  // FileExt This is the File extension as a string example "tif"
  InputDirPath=getDirectory("Select a FOLDER containing at least "+MinNbFile+" "+FileExt+" file(s) to process."); // Select a Folder
  InputItemList=getFileList(InputDirPath); // List of Item in the selected folder
  ParentDir=File.getParent(InputDirPath)+File.separator;
  InputDirName=File.getName(InputDirPath);

  SelectInputDirPass=0; // Switch for the Function
  NbFileWithCorrectExt=0; // Count of Nb of Files
  BaseNameError=0; // Switch to make sure there is only one "." in the filename
  InputCorrectExtFileList=newArray(0);
  UserResponseErrorDialog="";

  // Evaluate the Nb of File with correct extension and add them to InputCorrectExtFileList
  for (ItemI=0; ItemI<InputItemList.length; ItemI++){
    if(endsWith(toLowerCase(InputItemList[ItemI]), "."+toLowerCase(FileExt))){ // Select files with correct extension
      InputCorrectExtFileList=Append(InputCorrectExtFileList, InputItemList[ItemI]);
    }
  }
  NbFileWithCorrectExt=InputCorrectExtFileList.length;
  if(NbFileWithCorrectExt<MinNbFile){ // If the Nb of File with correct extension is not at least equal to the MinNbFile Create Error Message.
    MessageError="Sorry but the folder:\n\"" +InputDirName+"\"\ndoes not contain at least "+MinNbFile+" "+FileExt+" file(s).";
    MessageFix="The function \""+MacroName+"\" requires a folder that contains at least "+MinNbFile+" "+FileExt+" file(s).";
    ErrorResponseArray=newArray("Select Another Folder", "Cancel and Close");
    MessageQuit="The function \""+ MacroName+"\" stopped because the folder:\n\"" +InputDirName+"\"\ndid not contain at least "+MinNbFile+" "+FileExt+" file(s).";
    UserResponseErrorDialog=ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
    if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
      CleanExit(MessageQuit);
    } else if(UserResponseErrorDialog=="Select Another Folder") { // Else user want to select another folder
      SelectInputDirPass=0;
    }
  } else { // if NbFileWithCorrectExt is above or equal MinNbFile Evaluate Filenames
    InputFileList=newArray(0);
    for (FileI=0; FileI<InputCorrectExtFileList.length; FileI++){
      BasenameFileIArray=split(InputCorrectExtFileList[FileI],"."); // Make an array from the filename
      if(BasenameFileIArray.length!=2){ // if there is more than one . in the file name abort
        MessageError="Sorry but the "+FileExt+" file:\n\""+InputCorrectExtFileList[FileI]+"\"\ncontains more than one \".\" in its filename.";
        MessageFix="The function \""+MacroName+"\" does NOT allow filenames with more than one unique \".\" used for the file extension.";
        ErrorResponseArray=newArray("Select Another Folder", "Ignore This File", "Cancel and Close");
        MessageQuit="The function \""+ MacroName+"\" stopped because the file\n\""+InputCorrectExtFileList[FileI]+"\"\ncontains more than one \".\"\nMake sure filenames have no more than one unique \".\" for the file extension.";
        UserResponseErrorDialog=ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
        if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
          CleanExit(MessageQuit);
        } else if (UserResponseErrorDialog=="Ignore This File"){
          // Ignore
        } else if (UserResponseErrorDialog=="Select Another Folder") {
          FileI=InputCorrectExtFileList.length;
          SelectInputDirPass=0;
        }
      }else { // If basename is good add it to the InputFileList
        InputFileList=Append(InputFileList, InputCorrectExtFileList[FileI]);
      }
    }
    // Make sure InpuFileList is > MinNbFile
    NbFile=InputFileList.length;
    if(NbFile<MinNbFile && UserResponseErrorDialog!="Select Another Folder"){ // If the Nb of File with correct extension is not at least equal to the MinNbFile Create Error Message.
      MessageError="Sorry but the Folder:\n\"" +InputDirName+"\"\ndoes not contain at least "+MinNbFile+" "+FileExt+" File with no more than one \".\" in its filename.";
      MessageFix="The function \""+MacroName+"\" requires a folder that contains at least "+MinNbFile+" "+FileExt+" File with one unique \".\" used for the file extension.";
      ErrorResponseArray=newArray("Select Another Folder", "Cancel and Close");
      MessageQuit="The function \""+ MacroName+"\" stopped because the Folder:\n\"" +InputDirName+"\"\ndid not contain at least "+MinNbFile+" "+FileExt+" File no more than one \".\" in its filename.";
      UserResponseErrorDialog=ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
      if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
        CleanExit(MessageQuit);
      } else {
        SelectInputDirPass=0;
      }
    } else if (UserResponseErrorDialog=="Select Another Folder"){
      SelectInputDirPass=0; // InputDir Pass the criteria
    } else {
      SelectInputDirPass=1; // InputDir Pass the criteria
    }
  }
}
/////////////////////////// Function to select an Input Directory

/////////////////////////// Function to create a new output directory
var OutputDirPath; // The path of the output directory
var OutputDirName; // The name of the output directory
function CreateOutputDir(ParentDir, InputDirName, FolderSuffix){ // Folder suffix is a string appended to the input Directory
  OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+File.separator; // Create the outputdirpath
  n=1;
  while(File.exists(OutputDirPath)!=0){ // If the path already exist, increment with _ n until it does not exist
    n++;
    OutputDirPath=ParentDir+InputDirName+"_"+FolderSuffix+"_"+n+File.separator;
  } // End of making sure the outpudirectory is a new folder
  File.makeDirectory(OutputDirPath); // Create the outpudirectory
  OutputDirName=File.getName(OutputDirPath); // Get the Name of the output directory
}
/////////////////////////// Function to create a new output directory

/////////////////////////// Function to create subfolders within the newly create outputdirectory
function CreateOutputSubDir(SubDirArray) { // SubDirArray is an array of the desired subfolders
  for(i=0;i<SubDirArray.length;i++){
    SubDirPath=OutputDirPath+SubDirArray[i]+File.separator; // Because outpudirpath is unique and new the subfolders do not exist yet so no need to check if they are already present
    File.makeDirectory(SubDirPath);
  } // End of for
} // End of CreateOutputSubDir function
// NOTE:It is useful to create a string for the subdirectory paths
// For each element in the subdirarray addMessage
// Output[SubDirArrayElementN]Path=""+OutputDirPath+"[SubDirArrayElementN]"+File.separator;
// Then you can use directly the string to save within a subdirectory
/////////////////////////// Function to create subfolders within the newly create outputdirectory

/////////////////////////// Function Close and CleanUp Function
function CloseAndCleanUp(PluginName, FileI, NbFile, FileExt, InputDirName, OutputDirName){
  ListImages=getList("image.titles");
  for(n=0; n<ListImages.length; n++){ImageN=ListImages[n]; selectWindow(ImageN); run("Close");} // Close open Images
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  beep();
  // Closing Dialog Box
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(FileI+" of "+ NbFile+" "+ FileExt+ " file(s) in the folder:\n\""+InputDirName+"\"\nhave been processed successfully.");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage("Files are saved in the following folder:\n\""+OutputDirName+"\".");
  Dialog.setInsets(0, 0, 0);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  Dialog.show();
}
/////////////////////////// Function Close and CleanUp Function

/////////////////////////// CleanExit Function
function CleanExit(MessageQuit){
  ListImages=getList("image.titles");
  for(n=0; n<ListImages.length; n++){ImageN=ListImages[n]; selectWindow(ImageN); run("Close");} // Close open Images
  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  CloseUtilityWindows(ListUtilityWindows);
  beep();
  Dialog.create(PluginName+" Information");
  Dialog.setInsets(0, 0, 0);
  Dialog.addMessage(MessageQuit);
  Dialog.setInsets(0, 0, 0);
  Dialog.setLocation(ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
  Dialog.show();
  exit();
}
/////////////////////////// CleanExit Function

/////////////////////////// Close UtilityWindows
function CloseUtilityWindows(ListUtilityWindows){
  // Typically  ListUtilityWindows=newArray("Threshold", "Results", "ROI Manager", "B&C");
  for(WindowI=0; WindowI<ListUtilityWindows.length; WindowI++){
    UtilityWindowI=ListUtilityWindows[WindowI];
    if(isOpen(UtilityWindowI)){
      if(UtilityWindowI=="Results"){run("Clear Results");}
      if(UtilityWindowI=="ROI Manager"){roiManager("reset");}
      selectWindow(UtilityWindowI); run("Close"); }
    }
  }
  /////////////////////////// Close UtilityWindows
  //////////////////////////////////////////////// End of General Functions



  //////////////////////////////////////////////// Specific Functions
  /////////////////////////// Prompt for Selection
  // This function Prompt for a specific type of selection and ensure a selection is made before moving next
  var SelectionPromptPass; // This is the switch when the selection pass the criteria
  function SelectionPrompt(SelectionTypeName, SelectionInfo){
    // Selection name is the name of the selection. It is a string that can take the following values:
    // rectangle, oval, polygon, freehand, traced, straight line, segmented line, freehandline, angle, point, multipoint
    // SelectionInfo is a string that explains what the Selection should be
    // SelectionPromptPass=0;
    // Define what the SelectionType value for each selection
    if(SelectionTypeName=="rectangle"){
      SelectionValue=0;
    } else if(SelectionTypeName=="oval"){
      SelectionValue=1;
    } else if(SelectionTypeName=="polygon"){
      SelectionValue=2;
    } else if(SelectionTypeName=="freehand"){
      SelectionValue=3;
    } else if(SelectionTypeName=="traced"){
      SelectionValue=4;
    } else if(SelectionTypeName=="straight line"){
      SelectionValue=5;
    } else if(SelectionTypeName=="segmented line"){
      SelectionValue=6;
    } else if(SelectionTypeName=="freehand line"){
      SelectionValue=7;
    } else if(SelectionTypeName=="angle"){
      SelectionValue=8;
    } else if(SelectionTypeName=="point"){
      SelectionValue=10;
    } else if(SelectionTypeName=="multipoint"){
      SelectionValue=10;
    } else {
      SelectionValue=-1; // No selection
    }

    CurrentImageName=getTitle(); // Get the Image of the Current Image
    CurrentSelection=selectionType(); // Get the Current selection

    // If the currentselection does not match the expected selection but if there is something in the overlay
    if(CurrentSelection!=SelectionValue && Overlay.size==1){
      run("Show Overlay");
      Overlay.activateSelection(0); // Get the selection from the overlay
      run("Remove Overlay");
      CurrentSelection=selectionType(); // refresh Current selection
    }

    if(CurrentSelection==SelectionValue){ // If a correct Selection is present ask what to do
      setBatchMode("show");
      selectWindow(CurrentImageName);
      setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);

      MessageError="A "+SelectionTypeName+" selection was detected.";
      MessageFix="What would you like to do?";
      ErrorResponseArray=newArray("Keep the current "+SelectionTypeName+" selection", "Adjust the current "+SelectionTypeName+" selection", "Discard the current "+SelectionTypeName+" selection", "Cancel and Close");
      MessageQuit="The function \""+ MacroName+"\" stopped because the "+SelectionTypeName+" selection was not validated by the user.";
      UserResponseErrorDialog=ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
      if(UserResponseErrorDialog==ErrorResponseArray[0]){
        SelectionPromptPass=1;
      } else if(UserResponseErrorDialog==ErrorResponseArray[1]){
        SelectionPromptPass=0; // Set the Switch to 0
      } else if(UserResponseErrorDialog==ErrorResponseArray[2]) {
        run("Remove Overlay");
        run("Select None");
        SelectionPromptPass=0; // Set the Switch to 0
      }else if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]) {
        CleanExit(MessageQuit);
      }

    } else { // Else the current selection does not match the expected selection
      SelectionPromptPass=0;
      run("Select None");
    }

    if(SelectionPromptPass==0){ // If the selection is not set prompt or does not correspond to the expected selection
      setBatchMode("show");
      selectWindow(CurrentImageName);
      setLocation(IJPosX, IJPosY+IJSizeY+Spacer, IJSizeX, screenHeight*0.75);
      run("Hide Overlay");
      setTool(SelectionTypeName);
      // if(SelectionTypeName=="multipoint"){
      //   setTool("multipoint");
      //   run("Point Tool...", "type=Hybrid color=White size=Large label show counter=0"); // Set the Point tool as yellow Medium Circle
      //   doCommand("Point Tool..."); // Bring the non-modal Point Tool at front in a separate thread
      // }
      if(isOpen("Results")){run("Clear Results"); selectWindow("Results"); run("Close");} //end of if Results is open
      call("ij.gui.WaitForUserDialog.setNextLocation", ToolbarPosX, ToolbarPosY+ToolbarSizeY+2*Spacer);
      waitForUser(PluginName+" Information", "Draw a "+SelectionTypeName+" selection.\n"
      +SelectionInfo+
      "\nWhen done, press OK.");
      CurrentSelection=selectionType();
      if(CurrentSelection<0 || CurrentSelection!=SelectionValue){
        if(CurrentSelection<0){
          MessageError="Sorry but no "+SelectionTypeName+" selection was detected.";
          MessageFix="The function \""+MacroName+"\" requires a "+SelectionTypeName+" selection.";
          ErrorResponseArray=newArray("Create a "+SelectionTypeName+" selection", "Cancel and Close");
          MessageQuit="The function \""+ MacroName+"\" stopped because no "+SelectionTypeName+" selection was detected.";
        } else if(CurrentSelection!=SelectionValue){
          MessageError="Sorry but the selection is not a "+SelectionTypeName+".";
          MessageFix="The function \""+MacroName+"\" requires a "+SelectionTypeName+" selection.";
          ErrorResponseArray=newArray("Create a "+SelectionTypeName+" selection", "Cancel and Close");
          MessageQuit="The function \""+ MacroName+"\" stopped because the provided selection was not a "+SelectionTypeName+".";
        }
        setBatchMode("show");

        // Close results windows if it is open
        if(isOpen("Results")){run("Clear Results"); selectWindow("Results"); run("Close");} //end of if Results is open
        UserResponseErrorDialog=ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
        if(UserResponseErrorDialog==ErrorResponseArray[0]){
          run("Select None");
          SelectionPromptPass=0;
        } else if (UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
          CleanExit(MessageQuit);
        }
      } else {
        SelectionPromptPass=1;
        setBatchMode("hide");
      } // End of else Selection is good
    } // End of If selection does not pass prompt for a selection
  }
  /////////////////////////// Prompt for Selection



  /////////////////////////// Function to Select A File
  // Control File has correct extension, required header and that inputfile are present in the selected file
  var SelectFilePass=0;
  var FileFoundAuto=0;
  var FileNameArray = newArray(0);
  var ROIPosXArray = newArray(0);
  var ROIPosYArray = newArray(0);
  var ROIWidthArray = newArray(0);
  var ROIHeightArray = newArray(0);
  var ThresholdLowerValueArray = newArray(0);
  var ThresholdUpperValueArray = newArray(0);

  function SelectFile(FolderSuffix, FileName, FileExt, FileHeaderList){
    NbPotentialFolder=0;
    FileExtPass=0;
    FileHeaderPass=0;
    FileDataPass=0;
    SelectedInputFileList=newArray(0);

    // Search automatically for potential TXT file in Parent Directory
    ParentDirList=getFileList(ParentDir);
    for(N=0;N<ParentDirList.length;N++){
      ItemN=ParentDirList[N];
      if(matches(ItemN, InputDirName+"_"+FolderSuffix+"/?_?[0-9]*/?")){
        NbPotentialFolder++;
        ItemNumber=N;
      }
    }
    if(NbPotentialFolder==1 && FileFoundAuto!=1){ // If one correct folder and not already found
      FilePath=ParentDir+ParentDirList[ItemNumber]+FileName+".txt";
      if(File.exists(FilePath)){
        FileFoundAuto=1;
      }else{ // if  potential file is not found prompt for it
        FilePath=File.openDialog("Select the "+FileExt+" File containing "+FileName);
      }
    } else { // if no potential file prompt for it
      FilePath=File.openDialog("Select the "+FileExt+" File containing "+FileName);
    }

    if(!endsWith(toLowerCase(FilePath), "."+toLowerCase(FileExt))){ // If file does not have the correct extension
      MessageError="Sorry but the file:\n\"" +File.getName(FilePath)+"\"\nis not a "+FileExt+" file.";
      MessageFix="The function \""+MacroName+"\" requires a "+FileExt+" file providing "+FileName+".";
      ErrorResponseArray=newArray("Select Another "+FileExt+" File", "Cancel and Close");
      MessageQuit="The function \""+ MacroName+"\" stopped because the file:\n\""+File.getName(FilePath)+"\"\nwas not a "+FileExt+" file.";
      UserResponseErrorDialog=ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
      if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
        CleanExit(MessageQuit);
      } else { // Else user want to select another file
        SelectFilePass=0;
      }
    } else { // File has the correct extension
      FileExtPass=1;
      // Check file has the correct header
      run("Results... ", "open=&FilePath");
      FileHeaderArray=split(String.getResultsHeadings);
      if(isOpen("Results")){run("Clear Results"); selectWindow("Results"); run("Close");}
      for (ItemI=0; ItemI<FileHeaderList.length; ItemI++){ // Screen the RequiredItem List
        for (ItemN=0; ItemN<FileHeaderArray.length; ItemN++){
          if(FileHeaderList[ItemI]==FileHeaderArray[ItemN]){
            FileHeaderPass++;
            ItemN=FileHeaderArray.length; // End the loop once found
          }
        }
      }
      if(FileHeaderPass!=FileHeaderList.length){
        MessageError="Sorry but the file:\n\"" +File.getName(FilePath)+"\"\ndoes not contain the required header (columns).";
        MessageFix="The function \""+MacroName+"\" requires the following columns:";
        for (n=0;n<FileHeaderList.length;n++){
          MessageFix=MessageFix+"\n"+FileHeaderList[n];
        }
        ErrorResponseArray=newArray("Select Another "+FileExt+" File", "Cancel and Close");
        MessageQuit="The function \""+ MacroName+"\" stopped because the file:\n\""+File.getName(FilePath)+"\"\ndid not contain the required header.";
        UserResponseErrorDialog=ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
        if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
          CleanExit(MessageQuit);
        } else { // Else user want to select another file
          SelectFilePass=0;
        }
      } else { // required hearer is passed
        FileHeaderPass=1;

        run("Results... ", "open=&FilePath");
        // Create arrays
        FileNameArray = newArray(0);
        ROIPosXArray = newArray(0);
        ROIPosYArray = newArray(0);
        ROIWidthArray = newArray(0);
        ROIHeightArray = newArray(0);
        ThresholdLowerValueArray = newArray(0);
        ThresholdUpperValueArray = newArray(0);

        for (n=0;n<nResults;n++){ // Populate the arrays
          FileNameArray= Append(FileNameArray, getResultString("Filename", n));
          ROIPosXArray= Append(ROIPosXArray, getResultString("ROIPosX", n));
          ROIPosYArray= Append(ROIPosYArray, getResultString("ROIPosY", n));
          ROIWidthArray= Append(ROIWidthArray, getResultString("ROIWidth", n));
          ROIHeightArray= Append(ROIHeightArray, getResultString("ROIHeight", n));
          ThresholdLowerValueArray= Append(ThresholdLowerValueArray, getResultString("ThresholdLowerValue", n));
          ThresholdUpperValueArray= Append(ThresholdUpperValueArray, getResultString("ThresholdUpperValue", n));
        } // end of populating the array
        if(isOpen("Results")){run("Clear Results"); selectWindow("Results"); run("Close");}


        FilenamePass=0;

        for (FileI=0; FileI<InputFileList.length; FileI++){ // Screen the each file from InputFileList
          InputFileNameI=InputFileList[FileI];
          BasenameArray=split(InputFileNameI,".");
          InputFileNameINoExt=BasenameArray[0];

          for (ItemN=0; ItemN<FileNameArray.length; ItemN++){ // Screen filenames in the selected file
            if(toLowerCase(InputFileNameINoExt)==toLowerCase(FileNameArray[ItemN])){
              FilenamePass++;
              if(
              ROIPosXArray[ItemN]>=0
              && ROIPosYArray[ItemN]>=0
              && ROIWidthArray[ItemN]>0
              && ROIHeightArray[ItemN]>0
              && ThresholdLowerValueArray[ItemN]>0
              && ThresholdUpperValueArray[ItemN]>0
              && !(isNaN(ROIPosXArray[ItemN]))
              && !(isNaN(ROIPosYArray[ItemN]))
              && !(isNaN(ROIWidthArray[ItemN]))
              && !(isNaN(ROIHeightArray[ItemN]))
              && !(isNaN(ThresholdLowerValueArray[ItemN]))
              && !(isNaN(ThresholdUpperValueArray[ItemN]))
              ){
                FileDataPass++;
              }
            }
          }



          // If after screening the file the filname is not found
          if (FileI+1!=FilenamePass || FileI+1!=FileDataPass){
            if (FileI+1!=FilenamePass){
              MessageError="Sorry but the file:\n\""+InputFileList[FileI]+"\"\nis not present in the selected "+FileExt+" file.";
              MessageFix="The function \""+MacroName+"\" requires values in a "+FileExt+" file for each input file in the folder:\n\""+InputDirName+"\".";
            } else{
              MessageError="Sorry but the file:\n\""+InputFileList[FileI]+"\"\nhas no valid data in the selected "+FileExt+" file.";
              MessageFix="The function \""+MacroName+"\" requires valid data in a "+FileExt+" file for each input file in the folder:\n\""+InputDirName+"\".";
            }
            MessageQuit="The function \""+ MacroName+"\" stopped because the file:\n\""+File.getName(FilePath)+"\"\ndid not contain valid data for the file:\n\""+InputFileList[FileI]+"\".";
            ErrorResponseArray=newArray("Select Another "+FileExt+" File","Ignore this File", "Cancel and Close");
            UserResponseErrorDialog=ErrorDialog(MessageError, MessageFix, ErrorResponseArray);
            if(UserResponseErrorDialog==ErrorResponseArray[ErrorResponseArray.length-1]){
              CleanExit(MessageQuit);
            } else if(UserResponseErrorDialog=="Ignore this File"){ //User want to ignore this file
              FilenamePass++; // Fake Pass because file is ignored
              FileDataPass++;
            } else { // Else user want to select another file
              SelectFilePass=0;

              FileI=InputFileList.length; // end the loops
            }

          } else { // filename and data pass
            SelectedInputFileList=Append(SelectedInputFileList,InputFileList[FileI]);

          }
        }// end for FileI loop
        if (SelectedInputFileList.length>0){
          SelectFilePass=1;
          InputFileList=SelectedInputFileList;
        }
      } // end of file has correct header
    } // end of file has correct extension
  }// end of function select file
  /////////////////////////// Function to Select A File
  //////////////////////////////////////////////// Specific Functions



  //////////////////////////////////////////////// Macro starts here
  // Initial Message
  InitialMessage="The function \""+MacroName+"\" will:"
  +"\n - Prompt to select a folder containing at least "+MinNbFile+" "+FileExt+" file(s) to process"
  +"\n - Prompt to select a TXT file containing ROI Coordinates and Threshold Values"
  +"\n\nFor each "+FileExt+" file:"
  +"\n - Cropped Videos with the values found in the TXT file"
  +"\n - Cropped amd Threshold Videos with the values found in the TXT file"
  +"\n - Save Videos as TIF files";

  MessageDialog(InitialMessage); // Display the Initial Message

  // Select the InputDirectory
  do{
    SelectInputDir(MinNbFile,FileExt);
  }while(SelectInputDirPass!=1)

  RequiredHeaderList=newArray("Filename", "ROIPosX", "ROIPosY", "ROIWidth","ROIHeight", "ThresholdLowerValue","ThresholdUpperValue");
  do{
    SelectFile("ROI and Threshold Values","ROI and Threshold Values", "TXT", RequiredHeaderList );
    // Arguments for the function SelectFile(FolderSuffix, FileName, FileExt, FileHeaderList){
  }while(SelectFilePass!=1)

  // Create Unique Output directory
  CreateOutputDir(ParentDir, InputDirName, FolderSuffix);

  // Create OutputSubdirectories
  CreateOutputSubDir(SubDirArray);
  OutputImageCroppedPath=""+OutputDirPath+"Cropped"+File.separator;
  OutputImageThresholdedPath=""+OutputDirPath+"Thresholded"+File.separator;

  //////////////////////////////////////////////// Intermed
  // Message user this process can be long
  Message="The function \""+MacroName+"\" will now process your file(s).\n"
  +"This process can be long.\nPlease be patient.\nYou will be informed when it is completed."
  +"\nTo start the process, press OK.";
  MessageDialog(Message);
  //////////////////////////////////////////////// Intermed


  setBatchMode(true);
  //////////////////////////////////////////////// Process each File Part 2
  for (FileI = 0; FileI < InputFileList.length; FileI++){
    InputFileNameI=InputFileList[FileI];
    BasenameArray=split(InputFileNameI,".");
    InputFileNameINoExt=BasenameArray[0];
    InputFilePathI = InputDirPath+InputFileNameI;
    run("AVI...", "select=&InputFilePathI convert");

    //Look for the matching filename in the arrays and get the values
    RowI=0;
    while(FileNameArray[RowI]!=InputFileNameINoExt){
      RowI++;
    }
    FileNameRowI = FileNameArray[RowI];
    ROIPosX = ROIPosXArray[RowI];
    ROIPosY = ROIPosYArray[RowI];
    ROIWidth = ROIWidthArray[RowI];
    ROIHeight = ROIHeightArray[RowI];
    ThresholdLowerValue = ThresholdLowerValueArray[RowI];
    ThresholdUpperValue = ThresholdUpperValueArray[RowI];
    run("Select None");
    makeRectangle(ROIPosX, ROIPosY, ROIWidth, ROIHeight);
    run("Crop");
    saveAs("Tif", OutputImageCroppedPath+InputFileNameINoExt);

    // Transform to 8 bit and Threshold
    run("8-bit");
    setThreshold(ThresholdLowerValue, ThresholdUpperValue, "BlackBackground");
    run("Convert to Mask", "stack");
    saveAs("Tif", OutputImageThresholdedPath+InputFileNameINoExt);
    close();

    // Update the progress bar
    showProgress(FileI, InputFileList.length);
    call("java.lang.System.gc"); // Run garbage collector
  }
  //////////////////////////////////////////////// Process each File Part 2



  //////////////////////////////////////////////// Closing Dialog
  CloseAndCleanUp(PluginName, FileI, NbFile, FileExt, InputDirName, OutputDirName);
